# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dnsimple` gem.
# Please instead update this file by running `bin/tapioca gem dnsimple`.

# source://dnsimple//lib/dnsimple.rb#3
module Dnsimple
  class << self
    # Echoes a deprecation warning message.
    #
    # @api internal
    # @param message [String] The message to display.
    # @private
    # @return [void]
    #
    # source://dnsimple//lib/dnsimple.rb#12
    def deprecate(message = T.unsafe(nil)); end
  end
end

# source://dnsimple//lib/dnsimple/error.rb#45
class Dnsimple::AuthenticationError < ::Dnsimple::Error; end

# source://dnsimple//lib/dnsimple/error.rb#48
class Dnsimple::AuthenticationFailed < ::Dnsimple::AuthenticationError; end

# Client for the DNSimple API
#
# @example Default (Production)
#   require "dnsimple"
#
#   client = Dnsimple::Client.new(access_token: "abc")
# @example Custom Base URL (Sandbox)
#   require 'dnsimple'
#
#   client = Dnsimple::Client.new(base_url: "https://api.sandbox.dnsimple.com", access_token: "abc")
# @see https://developer.dnsimple.com/
# @see https://developer.dnsimple.com/sandbox/
# @see #base_url
#
# source://dnsimple//lib/dnsimple/client/clients.rb#4
class Dnsimple::Client
  # @return [Client] a new instance of Client
  #
  # source://dnsimple//lib/dnsimple/client.rb#71
  def initialize(options = T.unsafe(nil)); end

  # @return [String] Domain API access token for authentication
  # @see https://developer.dnsimple.com/v2/#authentication
  #
  # source://dnsimple//lib/dnsimple/client.rb#60
  def access_token; end

  # Sets the attribute access_token
  #
  # @param value the value to set the attribute access_token to.
  #
  # source://dnsimple//lib/dnsimple/client.rb#60
  def access_token=(_arg0); end

  # @return [Dnsimple::Client::AccountsService] The account-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#7
  def accounts; end

  # Base URL for API requests.
  #
  # It defaults to <tt>"https://api.dnsimple.com"</tt>.
  # For testing purposes use <tt>"https://api.sandbox.dnsimple.com"</tt>.
  #
  # @example Default (Production)
  #   require "dnsimple"
  #
  #   client = Dnsimple::Client.new(access_token: "abc")
  # @example Custom Base URL (Sandbox)
  #   require 'dnsimple'
  #
  #   client = Dnsimple::Client.new(base_url: "https://api.sandbox.dnsimple.com", access_token: "abc")
  # @return [String] Base URL
  # @see https://developer.dnsimple.com/sandbox/
  #
  # source://dnsimple//lib/dnsimple/client.rb#100
  def base_url; end

  # @return [Dnsimple::Client::CertificatesService] The certificate-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#12
  def certificates; end

  # @return [Dnsimple::Client::ContactsService] The contact-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#17
  def contacts; end

  # Make a HTTP DELETE request.
  #
  # @param path [String] The path, relative to {#base_url}
  # @param options [Hash] The query and header params for the request
  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/client.rb#149
  def delete(path, data = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [String] Domain API access token for authentication
  # @see https://developer.dnsimple.com/v2/#authentication
  #
  # source://dnsimple//lib/dnsimple/client.rb#55
  def domain_api_token; end

  # Sets the attribute domain_api_token
  #
  # @param value the value to set the attribute domain_api_token to.
  #
  # source://dnsimple//lib/dnsimple/client.rb#55
  def domain_api_token=(_arg0); end

  # @return [Dnsimple::Client::DomainsService] The domain-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#22
  def domains; end

  # Executes a request, validates and returns the response.
  #
  # @param method [String] The HTTP method
  # @param path [String] The path, relative to {#base_url}
  # @param data [Hash] The body for the request
  # @param options [Hash] The query and header params for the request
  # @raise [RequestError]
  # @raise [NotFoundError]
  # @raise [AuthenticationFailed]
  # @raise [TwoFactorAuthenticationRequired]
  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/client.rb#164
  def execute(method, path, data = T.unsafe(nil), options = T.unsafe(nil)); end

  # Make a HTTP GET request.
  #
  # @param path [String] The path, relative to {#base_url}
  # @param options [Hash] The query and header params for the request
  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/client.rb#110
  def get(path, options = T.unsafe(nil)); end

  # @return [Dnsimple::Client::IdentityService] The identity-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#27
  def identity; end

  # @return [Dnsimple::Client::OauthService] The oauth-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#32
  def oauth; end

  # @return [String] DNSimple password for Basic Authentication
  # @see https://developer.dnsimple.com/v2/#authentication
  #
  # source://dnsimple//lib/dnsimple/client.rb#50
  def password; end

  # Sets the attribute password
  #
  # @param value the value to set the attribute password to.
  #
  # source://dnsimple//lib/dnsimple/client.rb#50
  def password=(_arg0); end

  # Make a HTTP PATCH request.
  #
  # @param path [String] The path, relative to {#base_url}
  # @param data [Hash] The body for the request
  # @param options [Hash] The query and header params for the request
  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/client.rb#140
  def patch(path, data = T.unsafe(nil), options = T.unsafe(nil)); end

  # Make a HTTP POST request.
  #
  # @param path [String] The path, relative to {#base_url}
  # @param data [Hash] The body for the request
  # @param options [Hash] The query and header params for the request
  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/client.rb#120
  def post(path, data = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [String, nil] Configure address:port values for proxy server
  #
  # source://dnsimple//lib/dnsimple/client.rb#68
  def proxy; end

  # Sets the attribute proxy
  #
  # @param value the value to set the attribute proxy to.
  #
  # source://dnsimple//lib/dnsimple/client.rb#68
  def proxy=(_arg0); end

  # Make a HTTP PUT request.
  #
  # @param path [String] The path, relative to {#base_url}
  # @param data [Hash] The body for the request
  # @param options [Hash] The query and header params for the request
  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/client.rb#130
  def put(path, data = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [Dnsimple::Client::RegistrarService] The registrar-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#37
  def registrar; end

  # Make a HTTP request.
  #
  # This method doesn't validate the response and never raise errors
  # even in case of HTTP error codes, except for connection errors raised by
  # the underlying HTTP client.
  #
  # Therefore, it's up to the caller to properly handle and validate the response.
  #
  # @param method [String] The HTTP method
  # @param path [String] The path, relative to {#base_url}
  # @param data [Hash] The body for the request
  # @param options [Hash] The query and header params for the request
  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/client.rb#192
  def request(method, path, data = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [Dnsimple::Client::ServicesService] The one-click-service-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#42
  def services; end

  # @return [Dnsimple::Client::TemplatesService] The templates-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#47
  def templates; end

  # @return [Dnsimple::Client::TldsService] The tld-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#52
  def tlds; end

  # @return [String] Configure User-Agent header for requests.
  #
  # source://dnsimple//lib/dnsimple/client.rb#64
  def user_agent; end

  # Sets the attribute user_agent
  #
  # @param value the value to set the attribute user_agent to.
  #
  # source://dnsimple//lib/dnsimple/client.rb#64
  def user_agent=(_arg0); end

  # @return [String] DNSimple username for Basic Authentication
  # @see https://developer.dnsimple.com/v2/#authentication
  #
  # source://dnsimple//lib/dnsimple/client.rb#45
  def username; end

  # Sets the attribute username
  #
  # @param value the value to set the attribute username to.
  #
  # source://dnsimple//lib/dnsimple/client.rb#45
  def username=(_arg0); end

  # @return [Dnsimple::Client::VanityNameServersService] The vanity-name-server-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#57
  def vanity_name_servers; end

  # @return [Dnsimple::Client::WebhooksService] The webhooks-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#67
  def webhooks; end

  # @return [Dnsimple::Client::ZonesService] The zone-related API proxy.
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#62
  def zones; end

  private

  # source://dnsimple//lib/dnsimple/client.rb#232
  def add_auth_options!(options); end

  # source://dnsimple//lib/dnsimple/client.rb#224
  def add_proxy_options!(options); end

  # source://dnsimple//lib/dnsimple/client.rb#215
  def base_options; end

  # source://dnsimple//lib/dnsimple/client.rb#263
  def content_data(headers, data); end

  # source://dnsimple//lib/dnsimple/client.rb#259
  def content_type(headers); end

  # Builds the final user agent to use for HTTP requests.
  #
  # If no custom user agent is provided, the default user agent is used.
  #
  #     dnsimple-ruby/1.0
  #
  # If a custom user agent is provided, the final user agent is the combination
  # of the default user agent prepended by the custom user agent.
  #
  #     customAgentFlag dnsimple-ruby/1.0
  #
  # source://dnsimple//lib/dnsimple/client.rb#251
  def format_user_agent; end

  # source://dnsimple//lib/dnsimple/client.rb#206
  def request_options(custom_options = T.unsafe(nil)); end

  class << self
    # Prepends the correct API version to +path+.
    #
    # @return [String] The versioned path.
    #
    # source://dnsimple//lib/dnsimple/client.rb#37
    def versioned(path); end
  end
end

# @return [String] The current API version.
#
# source://dnsimple//lib/dnsimple/client.rb#31
Dnsimple::Client::API_VERSION = T.let(T.unsafe(nil), String)

# source://dnsimple//lib/dnsimple/client/accounts.rb#5
module Dnsimple::Client::Accounts
  # Lists the accounts the authenticated entity has access to.
  #
  # @example List the accounts:
  #   client.accounts.list
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Account>]
  # @see https://developer.dnsimple.com/v2/accounts
  #
  # source://dnsimple//lib/dnsimple/client/accounts.rb#18
  def accounts(options = T.unsafe(nil)); end

  # Lists the accounts the authenticated entity has access to.
  #
  # @example List the accounts:
  #   client.accounts.list
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Account>]
  # @see https://developer.dnsimple.com/v2/accounts
  #
  # source://dnsimple//lib/dnsimple/client/accounts.rb#18
  def list_accounts(options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#114
class Dnsimple::Client::AccountsService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Accounts
end

# source://dnsimple//lib/dnsimple/client/certificates.rb#5
module Dnsimple::Client::Certificates
  # List ALL the certificates for the domain in the account.
  #
  # This method is similar to {#certificates}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] The domain ID or domain name
  # @param options [Hash] the filtering and sorting option
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::Certificate>]
  # @see https://developer.dnsimple.com/v2/certificates/#listCertificates
  # @see #certificates
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#56
  def all_certificates(account_id, domain_name, options = T.unsafe(nil)); end

  # Get the details of a certificate.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or domain name
  # @param certificate_id [Integer] the certificate ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Certificate>]
  # @see https://developer.dnsimple.com/v2/certificates/#getCertificate
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#72
  def certificate(account_id, domain_id, certificate_id, options = T.unsafe(nil)); end

  # Get the PEM-encoded certificate private key.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or domain name
  # @param certificate_id [Integer] the certificate ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::CertificateBundle>]
  # @see https://developer.dnsimple.com/v2/certificates/#getCertificatePrivateKey
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#108
  def certificate_private_key(account_id, domain_id, certificate_id, options = T.unsafe(nil)); end

  # List the certificates for the domain in the account.
  #
  # @example List certificates in the first page
  #   client.certificates.list(1010, "example.com")
  # @example List certificates, provide a specific page
  #   client.certificates.list(1010, "example.com", page: 2)
  # @example List certificates, provide a sorting policy
  #   client.certificates.list(1010, "example.com", sort: "email:asc")
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] The domain ID or domain name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Certificate>]
  # @see https://developer.dnsimple.com/v2/certificates/#listCertificates
  # @see #all_certificates
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#29
  def certificates(account_id, domain_name, options = T.unsafe(nil)); end

  # Get the PEM-encoded certificate, along with the root certificate and intermediate chain.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or domain name
  # @param certificate_id [Integer] the certificate ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::CertificateBundle>]
  # @see https://developer.dnsimple.com/v2/certificates/#downloadCertificate
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#90
  def download_certificate(account_id, domain_id, certificate_id, options = T.unsafe(nil)); end

  # Issue a pending Let's Encrypt certificate order.
  #
  # Note that the issuance process is async. A successful response means the issuance
  # request has been successfully acknowledged and queued for processing.
  #
  # @example Basic usage
  #   reponse     = client.certificates.issue_letsencrypt_certificate(1010, "example.com", 100)
  #   certificate = response.data
  #
  #   certificate.state # => "requesting"
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or domain name
  # @param certificate_id [Integer] the certificate ID returned by the purchase method
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Certificate>]
  # @see https://developer.dnsimple.com/v2/certificates/#issueLetsencryptCertificate
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#197
  def issue_letsencrypt_certificate(account_id, domain_id, certificate_id, options = T.unsafe(nil)); end

  # Issue a pending Let's Encrypt certificate renewal order.
  #
  # Note that the issuance process is async. A successful response means the issuance
  # request has been successfully acknowledged and queued for processing.
  #
  # @example Basic usage
  #   response    = client.certificates.issue_letsencrypt_certificate_renewal(1010, "example.com", 100, 999)
  #   certificate = response.data
  #
  #   certificate.state # => "requesting"
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or domain name
  # @param certificate_id [Integer] the certificate ID
  # @param certificate_renewal_id [Integer] the certificate renewal ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Certificate>]
  # @see https://developer.dnsimple.com/v2/certificates/#issueRenewalLetsencryptCertificate
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#263
  def issue_letsencrypt_certificate_renewal(account_id, domain_id, certificate_id, certificate_renewal_id, options = T.unsafe(nil)); end

  # List the certificates for the domain in the account.
  #
  # @example List certificates in the first page
  #   client.certificates.list(1010, "example.com")
  # @example List certificates, provide a specific page
  #   client.certificates.list(1010, "example.com", page: 2)
  # @example List certificates, provide a sorting policy
  #   client.certificates.list(1010, "example.com", sort: "email:asc")
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] The domain ID or domain name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Certificate>]
  # @see https://developer.dnsimple.com/v2/certificates/#listCertificates
  # @see #all_certificates
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#29
  def list_certificates(account_id, domain_name, options = T.unsafe(nil)); end

  # Purchase a Let's Encrypt certificate.
  #
  # This method creates a new certificate order. The certificate ID should be used to
  # request the issuance of the certificate using {#issue_letsencrypt_certificate}.
  #
  # @example Basic usage
  #   response    = client.certificates.purchase_letsencrypt_certificate(1010, "example.com")
  #   certificate = response.data
  #
  #   certificate.id              # => 100
  #   certificate.common_name     # => "www.example.com"
  #   certificate.alternate_names # => []
  #   certificate.auto_renew      # => false
  # @example Custom name
  #   response    = client.certificates.purchase_letsencrypt_certificate(1010, "example.com", name: "docs")
  #   certificate = response.data
  #
  #   certificate.id              # => 100
  #   certificate.common_name     # => "docs.example.com"
  #   certificate.alternate_names # => []
  #   certificate.auto_renew      # => false
  # @example SAN names
  #   response    = client.certificates.purchase_letsencrypt_certificate(1010, "example.com", alternate_names: ["api.example.com", "status.example.com"])
  #   certificate = response.data
  #
  #   certificate.id              # => 100
  #   certificate.common_name     # => "www.example.com"
  #   certificate.alternate_names # => ["api.example.com", "status.example.com"]
  #   certificate.auto_renew      # => false
  # @example Auto renew
  #   response    = client.certificates.purchase_letsencrypt_certificate(1010, "example.com", auto_renew: true)
  #   certificate = response.data
  #
  #   certificate.id              # => 100
  #   certificate.common_name     # => "www.example.com"
  #   certificate.alternate_names # => []
  #   certificate.auto_renew      # => true
  # @option attributes
  # @option attributes
  # @option attributes
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or domain name
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::CertificatPurchase>]
  # @see https://developer.dnsimple.com/v2/certificates/#purchaseLetsencryptCertificate
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#169
  def purchase_letsencrypt_certificate(account_id, domain_id, attributes = T.unsafe(nil), options = T.unsafe(nil)); end

  # Purchase a Let's Encrypt certificate renewal.
  #
  # @example Basic usage
  #   response            = client.certificates.purchase_letsencrypt_certificate_renewal(1010, "example.com", 200)
  #   certificate_renewal = response.data
  #
  #   certificate_renewal.id                 # => 999
  #   certificate_renewal.old_certificate_id # => 200
  #   certificate_renewal.new_certificate_id # => 300
  # @example Auto renew
  #   response            = client.certificates.purchase_letsencrypt_certificate_renewal(1010, "example.com", 200, auto_renew: true)
  #   certificate_renewal = response.data
  #
  #   certificate_renewal.id                 # => 999
  #   certificate_renewal.old_certificate_id # => 200
  #   certificate_renewal.new_certificate_id # => 300
  # @option attributes
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or domain name
  # @param certificate_id [Integer] the certificate ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::CertificateRenewal>]
  # @see https://developer.dnsimple.com/v2/certificates/#purchaseRenewalLetsencryptCertificate
  #
  # source://dnsimple//lib/dnsimple/client/certificates.rb#234
  def purchase_letsencrypt_certificate_renewal(account_id, domain_id, certificate_id, attributes = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#121
class Dnsimple::Client::CertificatesService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Certificates
end

# Struct
#
# source://dnsimple//lib/dnsimple/client/clients.rb#73
class Dnsimple::Client::ClientService
  # @return [ClientService] a new instance of ClientService
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#78
  def initialize(client); end

  # @return [Dnsimple::Client]
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#76
  def client; end

  # Internal helper that loops over a paginated response and returns all the records in the collection.
  #
  # @api private
  # @param method [Symbol] The client method to execute
  # @param args [Array] The args to call the method with
  # @return [Dnsimple::CollectionResponse]
  #
  # source://dnsimple//lib/dnsimple/client/clients.rb#89
  def paginate(method, *args); end
end

# source://dnsimple//lib/dnsimple/client/contacts.rb#5
module Dnsimple::Client::Contacts
  # Lists ALL the contacts in the account.
  #
  # This method is similar to {#contacts}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::Contact>]
  # @see https://developer.dnsimple.com/v2/contacts/#list
  # @see #contacts
  #
  # source://dnsimple//lib/dnsimple/client/contacts.rb#55
  def all_contacts(account_id, options = T.unsafe(nil)); end

  # Gets a contact from the account.
  #
  # @param account_id [Integer] the account ID
  # @param contact_id [#to_s] the contact ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Contact>]
  # @see https://developer.dnsimple.com/v2/contacts/#get
  #
  # source://dnsimple//lib/dnsimple/client/contacts.rb#87
  def contact(account_id, contact_id, options = T.unsafe(nil)); end

  # Lists the contacts in the account.
  #
  # @example List contacts in the first page
  #   client.contacts.list(1010)
  # @example List contacts, provide a specific page
  #   client.contacts.list(1010, page: 2)
  # @example List contacts, provide a sorting policy
  #   client.contacts.list(1010, sort: "email:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Contact>]
  # @see https://developer.dnsimple.com/v2/contacts/#list
  # @see #all_contacts
  #
  # source://dnsimple//lib/dnsimple/client/contacts.rb#29
  def contacts(account_id, options = T.unsafe(nil)); end

  # Creates a contact in the account.
  #
  # @param account_id [Integer] the account ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Contact>]
  # @see https://developer.dnsimple.com/v2/contacts/#create
  #
  # source://dnsimple//lib/dnsimple/client/contacts.rb#69
  def create_contact(account_id, attributes, options = T.unsafe(nil)); end

  # Deletes a contact from the account.
  #
  # WARNING: this cannot be undone.
  #
  # @param account_id [Integer] the account ID
  # @param contact_id [#to_s] the contact ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/contacts/#delete
  #
  # source://dnsimple//lib/dnsimple/client/contacts.rb#123
  def delete_contact(account_id, contact_id, options = T.unsafe(nil)); end

  # Lists the contacts in the account.
  #
  # @example List contacts in the first page
  #   client.contacts.list(1010)
  # @example List contacts, provide a specific page
  #   client.contacts.list(1010, page: 2)
  # @example List contacts, provide a sorting policy
  #   client.contacts.list(1010, sort: "email:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Contact>]
  # @see https://developer.dnsimple.com/v2/contacts/#list
  # @see #all_contacts
  #
  # source://dnsimple//lib/dnsimple/client/contacts.rb#29
  def list_contacts(account_id, options = T.unsafe(nil)); end

  # Updates a contact in the account.
  #
  # @param account_id [Integer] the account ID
  # @param contact_id [#to_s] the contact ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Contact>]
  # @see https://developer.dnsimple.com/v2/contacts/#update
  #
  # source://dnsimple//lib/dnsimple/client/contacts.rb#104
  def update_contact(account_id, contact_id, attributes, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#128
class Dnsimple::Client::ContactsService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Contacts
end

# source://dnsimple//lib/dnsimple/client/domains.rb#5
module Dnsimple::Client::Domains
  # Lists ALL the domains in the account.
  #
  # This method is similar to {#domains}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting option
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::Domain>]
  # @see https://developer.dnsimple.com/v2/domains/#listDomains
  # @see #domains
  #
  # source://dnsimple//lib/dnsimple/client/domains.rb#60
  def all_domains(account_id, options = T.unsafe(nil)); end

  # Creates a domain in the account.
  #
  # @example Creating a domain in a specific account. Does not register the domain
  #   client.domains.create_domain(1010, name: "example.com")
  # @param account_id [Integer] the account ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Domain>]
  # @see https://developer.dnsimple.com/v2/domains/#createDomain
  #
  # source://dnsimple//lib/dnsimple/client/domains.rb#77
  def create_domain(account_id, attributes, options = T.unsafe(nil)); end

  # Deletes a domain from the account.
  #
  # WARNING: this cannot be undone.
  #
  # @example Deleting a domain in a specific account, by domain id
  #   client.domains.delete_domain(1010, 12345)
  # @example Deleting a domain in a specific account, by domain name
  #   client.domains.delete_domain(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/domains/#deleteDomain
  #
  # source://dnsimple//lib/dnsimple/client/domains.rb#126
  def delete_domain(account_id, domain_id, options = T.unsafe(nil)); end

  # Gets a domain from the account.
  #
  # @example Getting a domain in a specific account, by domain id
  #   client.domains.domain(1010, 12345)
  # @example Getting a domain in a specific account, by domain name
  #   client.domains.domain(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Domain>]
  # @see https://developer.dnsimple.com/v2/domains/#getDomain
  #
  # source://dnsimple//lib/dnsimple/client/domains.rb#102
  def domain(account_id, domain_id, options = T.unsafe(nil)); end

  # Lists the domains in the account.
  #
  # @example List domains in the first page
  #   client.domains.domains(1010)
  # @example List domains, provide a specific page
  #   client.domains.domains(1010, page: 2)
  # @example List domains, provide a sorting policy
  #   client.domains.domains(1010, sort: "expiration:asc")
  # @example List domains, provide a filtering policy
  #   client.domains.domains(1010, filter: { name_like: "example" })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Domain>]
  # @see https://developer.dnsimple.com/v2/domains/#listDomains
  # @see #all_domains
  #
  # source://dnsimple//lib/dnsimple/client/domains.rb#33
  def domains(account_id, options = T.unsafe(nil)); end

  # Lists the domains in the account.
  #
  # @example List domains in the first page
  #   client.domains.domains(1010)
  # @example List domains, provide a specific page
  #   client.domains.domains(1010, page: 2)
  # @example List domains, provide a sorting policy
  #   client.domains.domains(1010, sort: "expiration:asc")
  # @example List domains, provide a filtering policy
  #   client.domains.domains(1010, filter: { name_like: "example" })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Domain>]
  # @see https://developer.dnsimple.com/v2/domains/#listDomains
  # @see #all_domains
  #
  # source://dnsimple//lib/dnsimple/client/domains.rb#33
  def list_domains(account_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/domains_collaborators.rb#5
module Dnsimple::Client::DomainsCollaborators
  # Add a collaborator to the domain.
  #
  # @example Add collaborator
  #   client.domains.add_collaborator(1010, "example.com", email: "user@example.com")
  # @option attributes
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or name
  # @param attributes [Hash] user attributes
  # @param options [Hash] request options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Collaborator>]
  # @see https://developer.dnsimple.com/v2/domains/collaborators/#add
  #
  # source://dnsimple//lib/dnsimple/client/domains_collaborators.rb#46
  def add_collaborator(account_id, domain_id, attributes, options = T.unsafe(nil)); end

  # Lists the collaborators for a domain.
  #
  # @example List collaborators in the first page
  #   client.domains.collaborators(1010, "example.com")
  # @example List collaborators, provide a specific page
  #   client.domains.collaborators(1010, "example.com", page: 2)
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or name
  # @param options [Hash] request options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Collaborator>]
  # @see https://developer.dnsimple.com/v2/domains/collaborators/#list
  #
  # source://dnsimple//lib/dnsimple/client/domains_collaborators.rb#25
  def collaborators(account_id, domain_id, options = T.unsafe(nil)); end

  # Removes a collaborator from the domain.
  #
  # WARNING: this cannot be undone.
  #
  # @example Remove collaborator
  #   client.domains.remove_collaborator(1010, "example.com", 999)
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain ID or name
  # @param contact_id [#to_s] the contact ID
  # @param options [Hash] request options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/domains/collaborators/#remove
  #
  # source://dnsimple//lib/dnsimple/client/domains_collaborators.rb#70
  def remove_collaborator(account_id, domain_id, contact_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/domains_delegation_signer_records.rb#5
module Dnsimple::Client::DomainsDelegationSignerRecords
  # Lists ALL the delegation signer records for the domain.
  #
  # This method is similar to {#delegation_signer_records}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param options [Hash] the filtering and sorting option
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::DelegationSignerRecord>]
  # @see https://developer.dnsimple.com/v2/domains/dnssec/#ds-record-list
  # @see #email_forwards
  #
  # source://dnsimple//lib/dnsimple/client/domains_delegation_signer_records.rb#56
  def all_delegation_signer_records(account_id, domain_id, options = T.unsafe(nil)); end

  # Creates a delegation signer record for the domain.
  #
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @option attributes
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::DelegationSignerRecord>]
  # @see https://developer.dnsimple.com/v2/domains/dnssec/#ds-record-create
  # @see http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml
  # @see http://www.iana.org/assignments/ds-rr-types/ds-rr-types.xhtml
  #
  # source://dnsimple//lib/dnsimple/client/domains_delegation_signer_records.rb#78
  def create_delegation_signer_record(account_id, domain_id, attributes, options = T.unsafe(nil)); end

  # Gets a delegation signer record for the domain.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param ds_record_id [#to_s] The delegation signer record ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::DelegationSignerRecord>]
  # @see https://developer.dnsimple.com/v2/domains/dnssec/#ds-record-get
  #
  # source://dnsimple//lib/dnsimple/client/domains_delegation_signer_records.rb#97
  def delegation_signer_record(account_id, domain_id, ds_record_id, options = T.unsafe(nil)); end

  # Lists the delegation signer records for the domain.
  #
  # @example List delegation signer records in the first page
  #   client.domains.delegation_signer_records(1010, "example.com")
  # @example List delegation signer records, provide a specific page
  #   client.domains.email_forwards(1010, "example.com", page: 2)
  # @example List delegation signer records, provide a sorting policy
  #   client.domains.delegation_signer_records(1010, "example.com", sort: "from:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::DelegationSignerRecord>]
  # @see https://developer.dnsimple.com/v2/domains/dnssec/#ds-record-list
  #
  # source://dnsimple//lib/dnsimple/client/domains_delegation_signer_records.rb#30
  def delegation_signer_records(account_id, domain_id, options = T.unsafe(nil)); end

  # Deletes a delegation signer record for the domain.
  #
  # WARNING: this cannot be undone.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param ds_record_id [#to_s] The delegation signer record ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/domains/dnssec/#ds-record-delete
  #
  # source://dnsimple//lib/dnsimple/client/domains_delegation_signer_records.rb#117
  def delete_delegation_signer_record(account_id, domain_id, ds_record_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/domains_dnssec.rb#5
module Dnsimple::Client::DomainsDnssec
  # Disable DNSSEC for the domain in the account.
  #
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/dnssec/#disable
  #
  # source://dnsimple//lib/dnsimple/client/domains_dnssec.rb#35
  def disable_dnssec(account_id, domain_name, options = T.unsafe(nil)); end

  # Enable DNSSEC for the domain in the account.
  #
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Dnssec>]
  # @see https://developer.dnsimple.com/v2/dnssec/#enable
  #
  # source://dnsimple//lib/dnsimple/client/domains_dnssec.rb#18
  def enable_dnssec(account_id, domain_name, options = T.unsafe(nil)); end

  # Get the DNSSEC status for the domain in the account.
  #
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Dnssec>]
  # @see https://developer.dnsimple.com/v2/dnssec/#get
  #
  # source://dnsimple//lib/dnsimple/client/domains_dnssec.rb#52
  def get_dnssec(account_id, domain_name, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/domains_email_forwards.rb#5
module Dnsimple::Client::DomainsEmailForwards
  # Lists ALL the email forwards for the domain.
  #
  # This method is similar to {#email_forwards}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param options [Hash] the filtering and sorting option
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::EmailForward>]
  # @see https://developer.dnsimple.com/v2/domains/email-forwards/#list
  # @see #email_forwards
  #
  # source://dnsimple//lib/dnsimple/client/domains_email_forwards.rb#56
  def all_email_forwards(account_id, domain_id, options = T.unsafe(nil)); end

  # Creates an email forward for the domain.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::EmailForward>]
  # @see https://developer.dnsimple.com/v2/domains/email-forwards/#create
  #
  # source://dnsimple//lib/dnsimple/client/domains_email_forwards.rb#71
  def create_email_forward(account_id, domain_id, attributes, options = T.unsafe(nil)); end

  # Deletes an email forward for the domain.
  #
  # WARNING: this cannot be undone.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param email_forward_id [#to_s] The email forward ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/domains/email-forwards/#delete
  #
  # source://dnsimple//lib/dnsimple/client/domains_email_forwards.rb#110
  def delete_email_forward(account_id, domain_id, email_forward_id, options = T.unsafe(nil)); end

  # Gets a email forward for the domain.
  #
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param email_forward_id [#to_s] The email forward ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::EmailForward>]
  # @see https://developer.dnsimple.com/v2/domains/email-forwards/#get
  #
  # source://dnsimple//lib/dnsimple/client/domains_email_forwards.rb#90
  def email_forward(account_id, domain_id, email_forward_id, options = T.unsafe(nil)); end

  # Lists the email forwards for the domain.
  #
  # @example List email forwards in the first page
  #   client.domains.email_forwards(1010, "example.com")
  # @example List email forwards, provide a specific page
  #   client.domains.email_forwards(1010, "example.com", page: 2)
  # @example List email forwards, provide a sorting policy
  #   client.domains.email_forwards(1010, "example.com", sort: "from:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::EmailForward>]
  # @see https://developer.dnsimple.com/v2/domains/email-forwards/#list
  #
  # source://dnsimple//lib/dnsimple/client/domains_email_forwards.rb#30
  def email_forwards(account_id, domain_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/domains_pushes.rb#5
module Dnsimple::Client::DomainsPushes
  # Accept a domain push.
  #
  # @example Accept a domain push in the target account:
  #   client.domains.accept_push(2020, 1, contact_id: 2)
  # @option attributes
  # @param account_id [Integer] the target account ID
  # @param push_id [Integer] the domain push ID
  # @param options [Hash]
  # @param attributes [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/domains/pushes/#accept
  #
  # source://dnsimple//lib/dnsimple/client/domains_pushes.rb#69
  def accept_push(account_id, push_id, attributes, options = T.unsafe(nil)); end

  # Initiate a push for the domain.
  #
  # @example Initiate a domain pushe for example.com:
  #   client.domains.initiate_push(1010, "example.com", new_account_email: "admin@target-account.test")
  # @option attributes
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] The domain ID or domain name
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::DomainPush>]
  # @see https://developer.dnsimple.com/v2/domains/pushes/#initiate
  #
  # source://dnsimple//lib/dnsimple/client/domains_pushes.rb#22
  def initiate_push(account_id, domain_id, attributes, options = T.unsafe(nil)); end

  # Lists the pushes for the domain.
  #
  # @example List domain pushes in the first page
  #   client.domains.pushes(2020)
  # @example List domain pushes, provide a specific page
  #   client.domains.pushes(2020, page: 2)
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::DomainPush>]
  # @see https://developer.dnsimple.com/v2/domains/pushes/#list
  #
  # source://dnsimple//lib/dnsimple/client/domains_pushes.rb#47
  def pushes(account_id, options = T.unsafe(nil)); end

  # Reject a domain push.
  #
  # @example Reject a domain push in the target account:
  #   client.domains.reject_push(2020, 1, contact_id: 2)
  # @param account_id [Integer] the target account ID
  # @param push_id [Integer] the domain push ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/domains/pushes/#reject
  #
  # source://dnsimple//lib/dnsimple/client/domains_pushes.rb#90
  def reject_push(account_id, push_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#140
class Dnsimple::Client::DomainsService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Domains
  include ::Dnsimple::Client::DomainsDelegationSignerRecords
  include ::Dnsimple::Client::DomainsDnssec
  include ::Dnsimple::Client::DomainsEmailForwards
  include ::Dnsimple::Client::DomainsPushes
  include ::Dnsimple::Client::DomainsCollaborators
end

# source://dnsimple//lib/dnsimple/client.rb#28
Dnsimple::Client::HEADER_AUTHORIZATION = T.let(T.unsafe(nil), String)

# source://dnsimple//lib/dnsimple/client/identity.rb#5
module Dnsimple::Client::Identity
  # Gets the information about the current authenticated context.
  #
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Whoami>]
  # @see https://developer.dnsimple.com/v2/identity/#whoami
  #
  # source://dnsimple//lib/dnsimple/client/identity.rb#14
  def whoami(options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/identity.rb#21
module Dnsimple::Client::Identity::StaticHelpers
  # Calls {Identity#whoami} and directly returns the response data.
  #
  # @param client [Dnsimple::Client] the DNSimple client instance to use
  # @param args [Array] the args for the {Identity#whoami} call
  # @raise [Dnsimple::RequestError]
  # @return [Hash]
  # @see https://developer.dnsimple.com/v2/identity/#whoami
  #
  # source://dnsimple//lib/dnsimple/client/identity.rb#30
  def whoami(client, *args); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#152
class Dnsimple::Client::IdentityService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Identity
end

# source://dnsimple//lib/dnsimple/client/oauth.rb#5
module Dnsimple::Client::Oauth
  # Gets the URL to authorize an user for an application via the OAuth2 flow.
  #
  # @option options
  # @option options
  # @option options
  # @param client_id [String] Client Id you received when the application was registered with DNSimple.
  # @param options [Hash] a customizable set of options
  # @return [String] The URL to redirect the user to authorize.
  # @see https://developer.dnsimple.com/v2/oauth/
  #
  # source://dnsimple//lib/dnsimple/client/oauth.rb#33
  def authorize_url(client_id, options = T.unsafe(nil)); end

  # Exchange the short-lived authorization code for an access token
  # you can use to authenticate your API calls.
  #
  # @option options
  # @param client_id [String] Client Id you received when the application was registered with DNSimple.
  # @param client_secret [String] Client Secret you received when the application was registered with DNSimple.
  # @param options [Hash] a customizable set of options
  # @return [String] The url to redirect the user to authorize.
  # @see https://developer.dnsimple.com/v2/oauth/
  #
  # source://dnsimple//lib/dnsimple/client/oauth.rb#16
  def exchange_authorization_for_token(code, client_id, client_secret, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#159
class Dnsimple::Client::OauthService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Oauth
end

# source://dnsimple//lib/dnsimple/client/registrar.rb#5
module Dnsimple::Client::Registrar
  # Cancels an in progress domain transfer.
  #
  # @example Cancel the transfer 42 for example.com:
  #   client.registrar.cancel_domain_transfer(1010, "example.com", 42)
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param domain_transfer_id [Integer] the domain transfer ID
  # @param options [Hash]
  # @raise [NotFoundError] When record is not found.
  # @raise [RequestError] When the request fails.
  # @return [Struct::DomainTransfer]
  # @see https://developer.dnsimple.com/v2/registrar/#cancelDomainTransfer
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#150
  def cancel_domain_transfer(account_id, domain_name, domain_transfer_id, options = T.unsafe(nil)); end

  # Checks whether a domain is available to be registered.
  #
  # @example Check whether example.com is available:
  #   client.registrar.check_domain(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to check
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::DomainCheck]
  # @see https://developer.dnsimple.com/v2/registrar/#check
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#20
  def check_domain(account_id, domain_name, options = T.unsafe(nil)); end

  # Get prices for a domain.
  #
  # @example Check prices for example.com:
  #   client.registrar.get_domain_prices(1010, "example.com")
  # @param account_id [Integer] the Account id
  # @param domain_name [String] the domain name to find the prices
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::DomainPrice]
  # @see https://developer.dnsimple.com/v2/registrar/#getDomainPrices
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#40
  def get_domain_prices(account_id, domain_name, options = T.unsafe(nil)); end

  # Retrieves the details of an existing domain transfer.
  #
  # @example Retrieve the transfer 42 for example.com:
  #   client.registrar.get_domain_transfer(1010, "example.com", 42)
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param domain_transfer_id [Integer] the domain transfer ID
  # @param options [Hash]
  # @raise [NotFoundError] When record is not found.
  # @raise [RequestError] When the request fails.
  # @return [Struct::DomainTransfer]
  # @see https://developer.dnsimple.com/v2/registrar/#getDomainTransfer
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#128
  def get_domain_transfer(account_id, domain_name, domain_transfer_id, options = T.unsafe(nil)); end

  # Registers a domain.
  #
  # @example Initiate the registration of example.com using the contact 1234 as registrant
  #   including WHOIS privacy for the domain and enabling auto renewal:
  #   client.registrar.register_domain(1010, "example.com", registrant_id: 1234, private_whois: true, auto_renew: true)
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to register
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::DomainRegistration]
  # @see https://developer.dnsimple.com/v2/registrar/#register
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#62
  def register_domain(account_id, domain_name, attributes, options = T.unsafe(nil)); end

  # Renews a domain.
  #
  # @example Renew example.com for 3 years:
  #   client.registrar.renew_domain(1010, "example.com", period: 3)
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to renew
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::DomainRenewal]
  # @see https://developer.dnsimple.com/v2/registrar/#renew
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#84
  def renew_domain(account_id, domain_name, attributes = T.unsafe(nil), options = T.unsafe(nil)); end

  # Starts the transfer of a domain to DNSimple.
  #
  # @example Initiate the transfer for example.com using the contact 1234 as registrant:
  #   client.registrar.transfer_domain(1010, "example.com", registrant_id: 1234, auth_code: "x1y2z3")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to transfer
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::DomainTransfer]
  # @see https://developer.dnsimple.com/v2/registrar/#transfer
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#105
  def transfer_domain(account_id, domain_name, attributes, options = T.unsafe(nil)); end

  # Requests the transfer of a domain out of DNSimple.
  #
  # @example Request to transfer of example.com out of DNSimple:
  #   client.registrar.transfer_domain_out(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to transfer out
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/registrar/#transfer-out
  #
  # source://dnsimple//lib/dnsimple/client/registrar.rb#170
  def transfer_domain_out(account_id, domain_name, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/registrar_auto_renewal.rb#5
module Dnsimple::Client::RegistrarAutoRenewal
  # Disable auto renewal for the domain in the account.
  #
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/registrar/auto-renewal/
  #
  # source://dnsimple//lib/dnsimple/client/registrar_auto_renewal.rb#35
  def disable_auto_renewal(account_id, domain_name, options = T.unsafe(nil)); end

  # Enable auto renewal for the domain in the account.
  #
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/registrar/auto-renewal/
  #
  # source://dnsimple//lib/dnsimple/client/registrar_auto_renewal.rb#18
  def enable_auto_renewal(account_id, domain_name, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/registrar_delegation.rb#5
module Dnsimple::Client::RegistrarDelegation
  # Chagne name servers the domain is delegating to.
  #
  # @example Change the name servers example.com is delegating to:
  #   client.registrar.change_domain_delegation(1010, "example.com",
  #   ["ns1.dnsimple.com", "ns2.dnsimple.com", "ns3.dnsimple.com", "ns4.dnsimple.com"])
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to check
  # @param attributes [Array]
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<Array>]
  # @see https://developer.dnsimple.com/v2/registrar/delegation/#update
  #
  # source://dnsimple//lib/dnsimple/client/registrar_delegation.rb#42
  def change_domain_delegation(account_id, domain_name, attributes, options = T.unsafe(nil)); end

  # Disable vanity name servers for the domain.
  #
  # @example Disable vanity name servers for example.com:
  #   client.registrar.change_domain_delegation_from_vanity(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to check
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/registrar/delegation/#dedelegateFromVanity
  #
  # source://dnsimple//lib/dnsimple/client/registrar_delegation.rb#84
  def change_domain_delegation_from_vanity(account_id, domain_name, options = T.unsafe(nil)); end

  # Enable vanity name servers for the domain.
  #
  # @example Enable vanity name servers for example.com:
  #   client.registrar.change_domain_delegation_to_vanity(1010, "example.com",
  #   ["ns1.example.com", "ns2.example.com", "ns3.example.com", "ns4.example.com"])
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to check
  # @param attributes [Array]
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<Array<Dnsimple::Struct::VanityNameServer>>]
  # @see https://developer.dnsimple.com/v2/registrar/delegation/#delegateToVanity
  #
  # source://dnsimple//lib/dnsimple/client/registrar_delegation.rb#64
  def change_domain_delegation_to_vanity(account_id, domain_name, attributes, options = T.unsafe(nil)); end

  # Lists name servers the domain is delegating to.
  #
  # @example List the name servers example.com is delegating to:
  #   client.registrar.domain_delegation(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name to check
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<Array>]
  # @see https://developer.dnsimple.com/v2/registrar/delegation/#list
  #
  # source://dnsimple//lib/dnsimple/client/registrar_delegation.rb#20
  def domain_delegation(account_id, domain_name, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#169
class Dnsimple::Client::RegistrarService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Registrar
  include ::Dnsimple::Client::RegistrarAutoRenewal
  include ::Dnsimple::Client::RegistrarWhoisPrivacy
  include ::Dnsimple::Client::RegistrarDelegation
end

# source://dnsimple//lib/dnsimple/client/registrar_whois_privacy.rb#5
module Dnsimple::Client::RegistrarWhoisPrivacy
  # Disables whois privacy for the domain.
  #
  # @example Disable whois privacy for "example.com":
  #   client.registrar.disable_whois_privacy(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] The domain name
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::WhoisPrivacy]
  # @see https://developer.dnsimple.com/v2/registrar/whois-privacy/#disable
  #
  # source://dnsimple//lib/dnsimple/client/registrar_whois_privacy.rb#60
  def disable_whois_privacy(account_id, domain_name, options = T.unsafe(nil)); end

  # Enables whois privacy for the domain.
  #
  # @example Enable whois privacy for "example.com":
  #   client.registrar.enable_whois_privacy(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::WhoisPrivacy]
  # @see https://developer.dnsimple.com/v2/registrar/whois-privacy/#enable
  #
  # source://dnsimple//lib/dnsimple/client/registrar_whois_privacy.rb#40
  def enable_whois_privacy(account_id, domain_name, options = T.unsafe(nil)); end

  # Renews whois privacy for the domain.
  #
  # @example Renew whois privacy for "example.com":
  #   client.registrar.renew_whois_privacy(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] The domain name
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::WhoisPrivacy]
  # @see https://developer.dnsimple.com/v2/registrar/whois-privacy/#renew
  #
  # source://dnsimple//lib/dnsimple/client/registrar_whois_privacy.rb#80
  def renew_whois_privacy(account_id, domain_name, options = T.unsafe(nil)); end

  # Gets the whois privacy for the domain.
  #
  # @example Get the whois privacy for "example.com":
  #   client.registrar.whois_privacy(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Struct::WhoisPrivacy]
  # @see https://developer.dnsimple.com/v2/registrar/whois-privacy/#get
  #
  # source://dnsimple//lib/dnsimple/client/registrar_whois_privacy.rb#20
  def whois_privacy(account_id, domain_name, options = T.unsafe(nil)); end

  private

  # source://dnsimple//lib/dnsimple/client/registrar_whois_privacy.rb#90
  def whois_privacy_endpoint(account_id, domain_name); end
end

# source://dnsimple//lib/dnsimple/client/services.rb#5
module Dnsimple::Client::Services
  # Lists ALL the available one-click services.
  #
  # This method is similar to {#services}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of
  # requests you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @example List all the one-click services:
  #   client.services.all_services
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the filtering and sorting options
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Service>]
  # @see https://developer.dnsimple.com/v2/services/#list
  # @see #services
  #
  # source://dnsimple//lib/dnsimple/client/services.rb#56
  def all_services(options = T.unsafe(nil)); end

  # Lists the available one-click services.
  #
  # @example List one-click services:
  #   client.services.list_services
  # @example List one-click services, provide a specific page:
  #   client.services.list_services(page: 2)
  # @example List one-click services, provide a sorting policy:
  #   client.services.list_services(sort: "short_name:asc")
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the filtering and sorting options
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Service>]
  # @see https://developer.dnsimple.com/v2/services/#list
  #
  # source://dnsimple//lib/dnsimple/client/services.rb#27
  def list_services(options = T.unsafe(nil)); end

  # Gets the service with specified ID.
  #
  # @example Get service 43:
  #   client.services.service(43)
  # @param service_id [#to_s] The service ID
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<Dnsimple::Struct::Service>]
  # @see https://developer.dnsimple.com/v2/services/#get
  #
  # source://dnsimple//lib/dnsimple/client/services.rb#72
  def service(service_id, options = T.unsafe(nil)); end

  # Lists the available one-click services.
  #
  # @example List one-click services:
  #   client.services.list_services
  # @example List one-click services, provide a specific page:
  #   client.services.list_services(page: 2)
  # @example List one-click services, provide a sorting policy:
  #   client.services.list_services(sort: "short_name:asc")
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the filtering and sorting options
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Service>]
  # @see https://developer.dnsimple.com/v2/services/#list
  #
  # source://dnsimple//lib/dnsimple/client/services.rb#27
  def services(options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/services_domains.rb#5
module Dnsimple::Client::ServicesDomains
  # Lists the one-click services applied to the domain.
  #
  # @example List applied one-click services for example.com:
  #   client.service.applied_services(1010, "example.com")
  # @example List applied one-click services for example.com, provide a specific page:
  #   client.services.applied_services(1010, "example.com", page: 2)
  # @example List applied one-click services for example.com, provide a sorting policy:
  #   client.services.applied_services(1010, "example.com", sort: "short_name:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param domain_id [#to_s] the domain name
  # @param options [Hash] the filtering and sorting options
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Service>]
  # @see https://developer.dnsimple.com/v2/services/domains/#applied
  #
  # source://dnsimple//lib/dnsimple/client/services_domains.rb#29
  def applied_services(account_id, domain_id, options = T.unsafe(nil)); end

  # Apply a given one-click service to the domain.
  #
  # @example Apply one-click service service1 to example.com:
  #   client.domain_services.applied_services(1010, "example.com", "service1")
  # @example Apply one-click service service1 to example.com, provide optional settings:
  #   client.domain_services.applied_services(1010, "example.com", "service1", app: "foo")
  # @param account_id [Integer] the account ID
  # @param service_id [#to_s] the service name (or ID)
  # @param domain_id [#to_s] the domain name
  # @param settings [Hash] optional settings to apply the one-click service
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/services/domains/#apply
  #
  # source://dnsimple//lib/dnsimple/client/services_domains.rb#54
  def apply_service(account_id, service_id, domain_id, settings = T.unsafe(nil), options = T.unsafe(nil)); end

  # Unapply a given one-click service from the domain.
  #
  # @example Unapply one-click service service1 from example.com:
  #   client.domain_services.applied_services(1010, "example.com", "service1")
  # @param account_id [Integer] the account ID
  # @param service_id [#to_s] the service name (or ID)
  # @param domain_id [#to_s] the domain name
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/services/domains/#unapply
  #
  # source://dnsimple//lib/dnsimple/client/services_domains.rb#75
  def unapply_service(account_id, service_id, domain_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#180
class Dnsimple::Client::ServicesService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Services
  include ::Dnsimple::Client::ServicesDomains
end

# source://dnsimple//lib/dnsimple/client/templates.rb#5
module Dnsimple::Client::Templates
  # Lists ALL the templates in the account.
  #
  # This method is similar to {#templates}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of
  # requests you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @example List all the templates for account 1010:
  #   client.templates.all_templates(1010)
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Template>]
  # @see https://developer.dnsimple.com/v2/templates/#list
  # @see #templates
  #
  # source://dnsimple//lib/dnsimple/client/templates.rb#58
  def all_templates(account_id, options = T.unsafe(nil)); end

  # Creates a template in the account.
  #
  # @example Creating a template:
  #   client.templates.create_template(1010, name: "Pi", short_name: "pi", description: "Pi template")
  # @param account_id [Integer] the account ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Template>]
  # @see https://developer.dnsimple.com/v2/templates/#create
  #
  # source://dnsimple//lib/dnsimple/client/templates.rb#75
  def create_template(account_id, attributes, options = T.unsafe(nil)); end

  # Deletes a template from the account.
  #
  # WARNING: this cannot be undone.
  #
  # @example Delete template 5401 in account 1010:
  #   client.templates.delete_template(1010, 5401)
  # @param account_id [Integer] The account ID
  # @param template_id [#to_s] The template ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/templates/#delete
  #
  # source://dnsimple//lib/dnsimple/client/templates.rb#139
  def delete_template(account_id, template_id, options = T.unsafe(nil)); end

  # Lists the templates in the account.
  #
  # @example List the templates for account 1010:
  #   client.templates.list_templates(1010)
  # @example List the templates for account 1010, provide a specific page:
  #   client.templates.list_templates(1010, page: 2)
  # @example List the templates for account 1010, provide sorting policy:
  #   client.templates.list_templates(1010, sort: "short_name:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Template>]
  # @see https://developer.dnsimple.com/v2/templates/#list
  #
  # source://dnsimple//lib/dnsimple/client/templates.rb#28
  def list_templates(account_id, options = T.unsafe(nil)); end

  # Gets the template with specified ID.
  #
  # @example Get template 5401 in account 1010:
  #   client.templates.template(1010, 5401)
  # @param account_id [Integer] the account ID
  # @param template_id [#to_s] The template ID
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<Dnsimple::Struct::Template>]
  # @see https://developer.dnsimple.com/v2/templates/#get
  #
  # source://dnsimple//lib/dnsimple/client/templates.rb#95
  def template(account_id, template_id, options = T.unsafe(nil)); end

  # Lists the templates in the account.
  #
  # @example List the templates for account 1010:
  #   client.templates.list_templates(1010)
  # @example List the templates for account 1010, provide a specific page:
  #   client.templates.list_templates(1010, page: 2)
  # @example List the templates for account 1010, provide sorting policy:
  #   client.templates.list_templates(1010, sort: "short_name:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Template>]
  # @see https://developer.dnsimple.com/v2/templates/#list
  #
  # source://dnsimple//lib/dnsimple/client/templates.rb#28
  def templates(account_id, options = T.unsafe(nil)); end

  # Updates template with specified ID with provided data.
  #
  # @example Change the name of template 1 in account 1010:
  #   client.templates.update_template(1010, 1, name: "New name")
  # @param account_id [Integer] the account ID
  # @param template_id [#to_s] The template ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<Dnsimple::Struct::Template>]
  # @see https://developer.dnsimple.com/v2/templates/#update
  #
  # source://dnsimple//lib/dnsimple/client/templates.rb#116
  def update_template(account_id, template_id, attributes, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/templates_domains.rb#5
module Dnsimple::Client::TemplatesDomains
  # Applies a template to the domain.
  #
  # @example Apply template 5401 for example.com in account 1010:
  #   client.templates.apply_template(1010, 5401, "example.com")
  # @param account_id [Integer] The account ID
  # @param template_id [#to_s] The template ID
  # @param domain_id [#to_s] The Domain ID or name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/templates/domains/#apply
  #
  # source://dnsimple//lib/dnsimple/client/templates_domains.rb#22
  def apply_template(account_id, template_id, domain_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/templates_records.rb#5
module Dnsimple::Client::TemplatesRecords
  # Lists ALL the records in the template.
  #
  # This method is similar to {#records}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @example List all the records for "alpha template
  #   client.templates.all_records(1010, "alpha")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param template_id [String] the template name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::TemplateRecord>]
  # @see https://developer.dnsimple.com/v2/templates/records/#list
  # @see #all_records
  #
  # source://dnsimple//lib/dnsimple/client/templates_records.rb#63
  def all_records(account_id, template_id, options = T.unsafe(nil)); end

  # Creates a record in the template.
  #
  # @example Create an A record for "alpha" template
  #   client.templates.create_record(1010, "alpha", name: "", type: "A", content: "192.168.1.1", ttl: 600)
  # @param account_id [Integer] the account ID
  # @param template_id [String] the template name
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::TemplateRecord>]
  # @see https://developer.dnsimple.com/v2/templates/records/#create
  #
  # source://dnsimple//lib/dnsimple/client/templates_records.rb#82
  def create_record(account_id, template_id, attributes, options = T.unsafe(nil)); end

  # Deletes a record from the template.
  #
  # WARNING: this cannot be undone.
  #
  # @example Delete record 123 in "alpha template
  #   client.templates.delete_record(1010, "alpha", 123)
  # @param account_id [Integer] the account ID
  # @param template_id [String] the template name
  # @param record_id [Integer] the record ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/templates/records/#delete
  #
  # source://dnsimple//lib/dnsimple/client/templates_records.rb#129
  def delete_record(account_id, template_id, record_id, options = T.unsafe(nil)); end

  # Lists the records in the template.
  #
  # @example List the first page of records for the template "alpha"
  #   client.templates.records(1010, "alpha")
  # @example List records for the template "alpha", providing a specific page
  #   client.templates.records(1010, "alpha", page: 2)
  # @example List records for the template "alpha", providing sorting policy
  #   client.templates.records(1010, "alpha", sort: "type:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param template_id [String] the template name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::TemplateRecord>]
  # @see https://developer.dnsimple.com/v2/templates/records/#list
  # @see #all_records
  #
  # source://dnsimple//lib/dnsimple/client/templates_records.rb#31
  def list_records(account_id, template_id, options = T.unsafe(nil)); end

  # Gets a record from the template.
  #
  # @example Get record 123 in "alpha template
  #   client.templates.record(1010, "alpha", 123)
  # @param account_id [Integer] the account ID
  # @param template_id [String] the template name
  # @param record_id [Integer] the record ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::TemplateRecord>]
  # @see https://developer.dnsimple.com/v2/templates/records/#get
  #
  # source://dnsimple//lib/dnsimple/client/templates_records.rb#105
  def record(account_id, template_id, record_id, options = T.unsafe(nil)); end

  # Lists the records in the template.
  #
  # @example List the first page of records for the template "alpha"
  #   client.templates.records(1010, "alpha")
  # @example List records for the template "alpha", providing a specific page
  #   client.templates.records(1010, "alpha", page: 2)
  # @example List records for the template "alpha", providing sorting policy
  #   client.templates.records(1010, "alpha", sort: "type:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param template_id [String] the template name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::TemplateRecord>]
  # @see https://developer.dnsimple.com/v2/templates/records/#list
  # @see #all_records
  #
  # source://dnsimple//lib/dnsimple/client/templates_records.rb#31
  def records(account_id, template_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#190
class Dnsimple::Client::TemplatesService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Templates
  include ::Dnsimple::Client::TemplatesDomains
  include ::Dnsimple::Client::TemplatesRecords
end

# source://dnsimple//lib/dnsimple/client/tlds.rb#5
module Dnsimple::Client::Tlds
  # Lists ALL the TLDs in DNSimple.
  #
  # This method is similar to {#tlds}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @example List all TLDs in DNSimple
  #   client.tlds.all
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::Tld>]
  # @see https://developer.dnsimple.com/v2/tlds/#listTlds
  # @see #list_tlds
  #
  # source://dnsimple//lib/dnsimple/client/tlds.rb#53
  def all_tlds(options = T.unsafe(nil)); end

  # Lists the TLDs available for registration
  #
  # @example List TLDs in the first page
  #   client.tlds.list_tlds
  # @example List TLDs, providing a specific page
  #   client.tlds.list_tlds(page: 2)
  # @example List TLDs, providing sorting policy
  #   client.tlds.list_tlds(sort: "tld:asc")
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Tld>]
  # @see https://developer.dnsimple.com/v2/tlds/#listTlds
  #
  # source://dnsimple//lib/dnsimple/client/tlds.rb#26
  def list_tlds(options = T.unsafe(nil)); end

  # Gets a TLD details
  #
  # @example Get information on a specific TLD
  #   client.tlds.tld('com')
  # @param tld [#to_s] The TLD name.
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Tld>]
  # @see https://developer.dnsimple.com/v2/tlds/#getTld
  #
  # source://dnsimple//lib/dnsimple/client/tlds.rb#70
  def tld(tld, options = T.unsafe(nil)); end

  # Gets the extended attributes for a TLD.
  #
  # @example Get extended attributes for a specific TLD
  #   client.tlds.tld_extended_attributes('uk')
  # @param tld [#to_s] The TLD name.
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::ExtendedAttribute>]
  # @see https://developer.dnsimple.com/v2/tlds/#getTldExtendedAttributes
  #
  # source://dnsimple//lib/dnsimple/client/tlds.rb#89
  def tld_extended_attributes(tld, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#199
class Dnsimple::Client::TldsService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Tlds
end

# source://dnsimple//lib/dnsimple/client/vanity_name_servers.rb#5
module Dnsimple::Client::VanityNameServers
  # Disable vanity name servers for the domain.
  #
  # @example Disable vanity name servers for example.com:
  #   client.vanity_name_servers.disable_vanity_name_servers(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/vanity/#disableVanityNameServers
  #
  # source://dnsimple//lib/dnsimple/client/vanity_name_servers.rb#40
  def disable_vanity_name_servers(account_id, domain_name, options = T.unsafe(nil)); end

  # Enable vanity name servers for the domain.
  #
  # @example Enable vanity name servers for example.com:
  #   client.vanity_name_servers.enable_vanity_name_servers(1010, "example.com")
  # @param account_id [Integer] the account ID
  # @param domain_name [#to_s] the domain name
  # @param options [Hash]
  # @raise [RequestError] When the request fails.
  # @return [Dnsimple::Response<Array>]
  # @see https://developer.dnsimple.com/v2/vanity/#enableVanityNameServers
  #
  # source://dnsimple//lib/dnsimple/client/vanity_name_servers.rb#20
  def enable_vanity_name_servers(account_id, domain_name, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#206
class Dnsimple::Client::VanityNameServersService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::VanityNameServers
end

# source://dnsimple//lib/dnsimple/client/webhooks.rb#5
module Dnsimple::Client::Webhooks
  # Creates a webhook in the account.
  #
  # @param account_id [Integer] the account ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Webhook>]
  # @see https://developer.dnsimple.com/v2/webhooks/#create
  #
  # source://dnsimple//lib/dnsimple/client/webhooks.rb#45
  def create_webhook(account_id, attributes, options = T.unsafe(nil)); end

  # Deletes a webook from the account.
  #
  # WARNING: this cannot be undone.
  #
  # @param account_id [Integer] the account ID
  # @param webhook_id [#to_s] The webhook ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/webooks/#delete
  #
  # source://dnsimple//lib/dnsimple/client/webhooks.rb#82
  def delete_webhook(account_id, webhook_id, options = T.unsafe(nil)); end

  # Lists ALL the webhooks in the account.
  #
  # @example List all webhooks
  #   client.webhooks.list(1010)
  # @example List all webhooks, provide a specific page
  #   client.webhooks.list(1010, page: 2)
  # @example List all webhooks, provide sorting policy
  #   client.webhooks.list(1010, sort: "id:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::Webhook>]
  # @see https://developer.dnsimple.com/v2/webhooks/#list
  #
  # source://dnsimple//lib/dnsimple/client/webhooks.rb#28
  def list_webhooks(account_id, options = T.unsafe(nil)); end

  # Gets a webhook from the account.
  #
  # @param account_id [Integer] the account ID
  # @param webhook_id [#to_s] The webhook ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Webhook>]
  # @see https://developer.dnsimple.com/v2/webhooks/#get
  #
  # source://dnsimple//lib/dnsimple/client/webhooks.rb#63
  def webhook(account_id, webhook_id, options = T.unsafe(nil)); end

  # Lists ALL the webhooks in the account.
  #
  # @example List all webhooks
  #   client.webhooks.list(1010)
  # @example List all webhooks, provide a specific page
  #   client.webhooks.list(1010, page: 2)
  # @example List all webhooks, provide sorting policy
  #   client.webhooks.list(1010, sort: "id:asc")
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::Webhook>]
  # @see https://developer.dnsimple.com/v2/webhooks/#list
  #
  # source://dnsimple//lib/dnsimple/client/webhooks.rb#28
  def webhooks(account_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#224
class Dnsimple::Client::WebhooksService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Webhooks
end

# source://dnsimple//lib/dnsimple/client/zones.rb#5
module Dnsimple::Client::Zones
  # Lists ALL the zones in the account.
  #
  # This method is similar to {#zones}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::Zone>]
  # @see https://developer.dnsimple.com/v2/zones/#list
  # @see #zones
  #
  # source://dnsimple//lib/dnsimple/client/zones.rb#60
  def all_zones(account_id, options = T.unsafe(nil)); end

  # Lists the zones in the account.
  #
  # @example List zones in the first page
  #   client.zones.list(1010, "example.com")
  # @example List zones, provide a specific page
  #   client.zones.list(1010, "example.com", page: 2)
  # @example List zones, provide sorting policy
  #   client.zones.list(1010, "example.com", sort: "name:desc")
  # @example List zones, provide filtering policy
  #   client.zones.list(1010, "example.com", filter: { name_like: "example" })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Zone>]
  # @see https://developer.dnsimple.com/v2/zones/#list
  # @see #all_zones
  #
  # source://dnsimple//lib/dnsimple/client/zones.rb#33
  def list_zones(account_id, options = T.unsafe(nil)); end

  # Gets a zone from the account.
  #
  # @param account_id [Integer] the account ID
  # @param zone_id [#to_s] the zone name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::Zone>]
  # @see https://developer.dnsimple.com/v2/zones/#get
  #
  # source://dnsimple//lib/dnsimple/client/zones.rb#75
  def zone(account_id, zone_id, options = T.unsafe(nil)); end

  # Gets a zone file from the account.
  #
  # @param account_id [Integer] the account ID
  # @param zone_name [#to_s] the zone name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::ZoneFile>]
  # @see https://developer.dnsimple.com/v2/zones/#get-file
  #
  # source://dnsimple//lib/dnsimple/client/zones.rb#92
  def zone_file(account_id, zone_name, options = T.unsafe(nil)); end

  # Lists the zones in the account.
  #
  # @example List zones in the first page
  #   client.zones.list(1010, "example.com")
  # @example List zones, provide a specific page
  #   client.zones.list(1010, "example.com", page: 2)
  # @example List zones, provide sorting policy
  #   client.zones.list(1010, "example.com", sort: "name:desc")
  # @example List zones, provide filtering policy
  #   client.zones.list(1010, "example.com", filter: { name_like: "example" })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::Zone>]
  # @see https://developer.dnsimple.com/v2/zones/#list
  # @see #all_zones
  #
  # source://dnsimple//lib/dnsimple/client/zones.rb#33
  def zones(account_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/zones_distributions.rb#5
module Dnsimple::Client::ZonesDistributions
  # Checks if a zone change is fully distributed to all DNSimple name
  # servers across the globe.
  #
  # @param account_id [Integer] the account ID
  # @param zone_id [#to_s] the zone name
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::ZoneDistribution>]
  # @see https://developer.dnsimple.com/v2/zones/#checkZoneDistribution
  #
  # source://dnsimple//lib/dnsimple/client/zones_distributions.rb#19
  def zone_distribution(account_id, zone_id, options = T.unsafe(nil)); end

  # Checks if a zone record is fully distributed to all DNSimple name
  # servers across the globe.
  #
  # @example Get record 123 in zone "example.com"
  #   client.zones.zone_record_distribution(1010, "example.com", 123)
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param record_id [Integer] the record ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::ZoneDistribution>]
  # @see https://developer.dnsimple.com/v2/zones/records/#checkZoneRecordDistribution
  #
  # source://dnsimple//lib/dnsimple/client/zones_distributions.rb#41
  def zone_record_distribution(account_id, zone_id, record_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/zones_records.rb#5
module Dnsimple::Client::ZonesRecords
  # Lists ALL the zone records in the account.
  #
  # This method is similar to {#records}, but instead of returning the results of a specific page
  # it iterates all the pages and returns the entire collection.
  #
  # Please use this method carefully, as fetching the entire collection will increase the number of requests
  # you send to the API server and you may eventually risk to hit the throttle limit.
  #
  # @example List all records for the zone "example.com"
  #   client.zones.all_zone_records(1010, "example.com")
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::CollectionResponse<Dnsimple::Struct::ZoneRecord>]
  # @see https://developer.dnsimple.com/v2/zones/records/#listZoneRecords
  # @see #records
  #
  # source://dnsimple//lib/dnsimple/client/zones_records.rb#67
  def all_zone_records(account_id, zone_id, options = T.unsafe(nil)); end

  # Creates a zone record in the account.
  #
  # @example Create a URL record in zone "example.com"
  #   client.zones.create_zone_record(1010, "example.com", name: "www", type: "url", content: "example.com")
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::ZoneRecord>]
  # @see https://developer.dnsimple.com/v2/zones/records/#createZoneRecord
  #
  # source://dnsimple//lib/dnsimple/client/zones_records.rb#86
  def create_zone_record(account_id, zone_id, attributes, options = T.unsafe(nil)); end

  # Deletes a zone record from the account.
  #
  # WARNING: this cannot be undone.
  #
  # @example Delete record 123 in zone "example.com"
  #   client.zones.delete_zone_record(1010, "example.com", 123)
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param record_id [Integer] the record ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<nil>]
  # @see https://developer.dnsimple.com/v2/zones/records/#deleteZoneRecord
  #
  # source://dnsimple//lib/dnsimple/client/zones_records.rb#153
  def delete_zone_record(account_id, zone_id, record_id, options = T.unsafe(nil)); end

  # Lists the zone records in the account.
  #
  # @example List records for the zone "example.com" in the first page
  #   client.zones.list_zone_records(1010, "example.com")
  # @example List records for the zone "example.com", provide a specific page
  #   client.zones.list_zone_records(1010, "example.com", page: 2)
  # @example List records for the zone "example.com", sorting in ascending order
  #   client.zones.list_zone_records(1010, "example.com", sort: "type:asc")
  # @example List records for the zone "example.com", filtering by 'A' record type
  #   client.zones.list_zone_records(1010, "example.com", filter: { type: 'A' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::ZoneRecord>]
  # @see https://developer.dnsimple.com/v2/zones/records/#listZoneRecords
  # @see #all_records
  #
  # source://dnsimple//lib/dnsimple/client/zones_records.rb#35
  def list_zone_records(account_id, zone_id, options = T.unsafe(nil)); end

  # Updates a zone record in the account.
  #
  # @example Update the TTL to 600 of record 123 in zone "example.com"
  #   client.zones.update_zone_record(1010, "example.com", 123, ttl: 600)
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param record_id [Integer] the record ID
  # @param attributes [Hash]
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::ZoneRecord>]
  # @see https://developer.dnsimple.com/v2/zones/records/#updateZoneRecord
  #
  # source://dnsimple//lib/dnsimple/client/zones_records.rb#130
  def update_zone_record(account_id, zone_id, record_id, attributes, options = T.unsafe(nil)); end

  # Gets a zone record from the account.
  #
  # @example Get record 123 in zone "example.com"
  #   client.zones.zone_record(1010, "example.com", 123)
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param record_id [Integer] the record ID
  # @param options [Hash]
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::Response<Dnsimple::Struct::ZoneRecord>]
  # @see https://developer.dnsimple.com/v2/zones/records/#getZoneRecord
  #
  # source://dnsimple//lib/dnsimple/client/zones_records.rb#108
  def zone_record(account_id, zone_id, record_id, options = T.unsafe(nil)); end

  # Lists the zone records in the account.
  #
  # @example List records for the zone "example.com" in the first page
  #   client.zones.list_zone_records(1010, "example.com")
  # @example List records for the zone "example.com", provide a specific page
  #   client.zones.list_zone_records(1010, "example.com", page: 2)
  # @example List records for the zone "example.com", sorting in ascending order
  #   client.zones.list_zone_records(1010, "example.com", sort: "type:asc")
  # @example List records for the zone "example.com", filtering by 'A' record type
  #   client.zones.list_zone_records(1010, "example.com", filter: { type: 'A' })
  # @option options
  # @option options
  # @option options
  # @option options
  # @param account_id [Integer] the account ID
  # @param zone_id [String] the zone name
  # @param options [Hash] the filtering and sorting options
  # @raise [Dnsimple::NotFoundError]
  # @raise [Dnsimple::RequestError]
  # @return [Dnsimple::PaginatedResponse<Dnsimple::Struct::ZoneRecord>]
  # @see https://developer.dnsimple.com/v2/zones/records/#listZoneRecords
  # @see #all_records
  #
  # source://dnsimple//lib/dnsimple/client/zones_records.rb#35
  def zone_records(account_id, zone_id, options = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/client/clients.rb#215
class Dnsimple::Client::ZonesService < ::Dnsimple::Client::ClientService
  include ::Dnsimple::Client::Zones
  include ::Dnsimple::Client::ZonesRecords
  include ::Dnsimple::Client::ZonesDistributions
end

# The CollectionResponse is a specific type of Response where the data is a collection of enumerable objects.
#
# source://dnsimple//lib/dnsimple/response.rb#43
class Dnsimple::CollectionResponse < ::Dnsimple::Response; end

# Default configuration options for {Client}
#
# source://dnsimple//lib/dnsimple/default.rb#6
module Dnsimple::Default
  class << self
    # Default DNSimple access token for OAuth authentication from ENV
    #
    # @return [String]
    #
    # source://dnsimple//lib/dnsimple/default.rb#56
    def access_token; end

    # Default API endpoint from ENV or {BASE_URL}
    #
    # @return [String]
    #
    # source://dnsimple//lib/dnsimple/default.rb#38
    def base_url; end

    # Default DNSimple Domain API Token for Token Auth from ENV
    #
    # @return [String]
    #
    # source://dnsimple//lib/dnsimple/default.rb#62
    def domain_api_token; end

    # List of configurable keys for {Client}
    #
    # @return [Array] of option keys
    #
    # source://dnsimple//lib/dnsimple/default.rb#18
    def keys; end

    # Configuration options
    #
    # @return [Hash]
    #
    # source://dnsimple//lib/dnsimple/default.rb#32
    def options; end

    # Default DNSimple password for Basic Auth from ENV
    #
    # @return [String]
    #
    # source://dnsimple//lib/dnsimple/default.rb#50
    def password; end

    # Default Proxy address:port from ENV
    #
    # @return [String]
    #
    # source://dnsimple//lib/dnsimple/default.rb#74
    def proxy; end

    # Default User-Agent header string from ENV
    #
    # @return [String]
    #
    # source://dnsimple//lib/dnsimple/default.rb#68
    def user_agent; end

    # Default DNSimple username for Basic Auth from ENV
    #
    # @return [String]
    #
    # source://dnsimple//lib/dnsimple/default.rb#44
    def username; end
  end
end

# Default API endpoint
#
# source://dnsimple//lib/dnsimple/default.rb#9
Dnsimple::Default::BASE_URL = T.let(T.unsafe(nil), String)

# Default User Agent header
#
# source://dnsimple//lib/dnsimple/default.rb#12
Dnsimple::Default::USER_AGENT = T.let(T.unsafe(nil), String)

# source://dnsimple//lib/dnsimple/error.rb#5
class Dnsimple::Error < ::StandardError; end

# source://dnsimple//lib/dnsimple/extra.rb#4
module Dnsimple::Extra
  class << self
    # Returns a new hash with +self+ and +other+ merged recursively.
    #
    #   h1 = { a: true, b: { c: [1, 2, 3] } }
    #   h2 = { a: false, b: { x: [3, 4, 5] } }
    #
    #   Extra.deep_merge(h1, h2) #=> { a: false, b: { c: [1, 2, 3], x: [3, 4, 5] } }
    #
    # Like with Hash#merge in the standard library, a block can be provided
    # to merge values:
    #
    #   h1 = { a: 100, b: 200, c: { c1: 100 } }
    #   h2 = { b: 250, c: { c1: 200 } }
    #   Extra.deep_merge(h1, h2) { |key, this_val, other_val| this_val + other_val }
    #   # => { a: 100, b: 450, c: { c1: 300 } }
    #
    # source://dnsimple//lib/dnsimple/extra.rb#27
    def deep_merge(this, other, &block); end

    # Same as +deep_merge+, but modifies +this+ instead of returning a new hash.
    #
    # source://dnsimple//lib/dnsimple/extra.rb#32
    def deep_merge!(this, other, &block); end

    # Joins two pieces of URI with a /.
    #
    # @return [String] The joined string.
    #
    # source://dnsimple//lib/dnsimple/extra.rb#9
    def join_uri(*parts); end

    # Validates the presence of mandatory attributes.
    #
    # @param attributes [Hash]
    # @param required [Array<Symbol>]
    # @raise [ArgumentError]
    # @return [void]
    #
    # source://dnsimple//lib/dnsimple/extra.rb#56
    def validate_mandatory_attributes(attributes, required); end
  end
end

# source://dnsimple//lib/dnsimple/error.rb#42
class Dnsimple::NotFoundError < ::Dnsimple::RequestError; end

# source://dnsimple//lib/dnsimple/options.rb#4
module Dnsimple::Options; end

# source://dnsimple//lib/dnsimple/options.rb#6
class Dnsimple::Options::Base
  # @return [Base] a new instance of Base
  #
  # source://dnsimple//lib/dnsimple/options.rb#7
  def initialize(options); end

  # source://dnsimple//lib/dnsimple/options.rb#11
  def to_h; end
end

# source://dnsimple//lib/dnsimple/options.rb#16
class Dnsimple::Options::ListOptions < ::Dnsimple::Options::Base
  # @return [ListOptions] a new instance of ListOptions
  #
  # source://dnsimple//lib/dnsimple/options.rb#17
  def initialize(options); end

  private

  # source://dnsimple//lib/dnsimple/options.rb#49
  def _merge(hash); end

  # source://dnsimple//lib/dnsimple/options.rb#44
  def _prepare_filter; end

  # source://dnsimple//lib/dnsimple/options.rb#31
  def _prepare_pagination; end

  # source://dnsimple//lib/dnsimple/options.rb#27
  def _prepare_query; end

  # source://dnsimple//lib/dnsimple/options.rb#39
  def _prepare_sort; end
end

# The PaginatedResponse is a specific type of Response that also exposes pagination metadata.
#
# source://dnsimple//lib/dnsimple/response.rb#48
class Dnsimple::PaginatedResponse < ::Dnsimple::CollectionResponse
  # Initializes a new paginated response from the response metadata,
  # and with given collection.
  #
  # @param http_response [Hash] the HTTP response
  # @param collection [Array] the enumerable collection of records returned in the response data
  # @return [PaginatedResponse] a new instance of PaginatedResponse
  #
  # source://dnsimple//lib/dnsimple/response.rb#68
  def initialize(http_response, collection); end

  # @return [Integer] The current page.
  #
  # source://dnsimple//lib/dnsimple/response.rb#51
  def page; end

  # @return [Integer] The number of records per page.
  #
  # source://dnsimple//lib/dnsimple/response.rb#54
  def per_page; end

  # @return [Integer] The total number of records.
  #
  # source://dnsimple//lib/dnsimple/response.rb#57
  def total_entries; end

  # @return [Integer] The total number of pages.
  #
  # source://dnsimple//lib/dnsimple/response.rb#60
  def total_pages; end
end

# RequestError is raised when an API request fails for an client, a server error or invalid request information.
#
# source://dnsimple//lib/dnsimple/error.rb#9
class Dnsimple::RequestError < ::Dnsimple::Error
  # @return [RequestError] a new instance of RequestError
  #
  # source://dnsimple//lib/dnsimple/error.rb#12
  def initialize(http_response); end

  # Returns the value of attribute attribute_errors.
  #
  # source://dnsimple//lib/dnsimple/error.rb#10
  def attribute_errors; end

  # Returns the value of attribute http_response.
  #
  # source://dnsimple//lib/dnsimple/error.rb#10
  def http_response; end

  private

  # source://dnsimple//lib/dnsimple/error.rb#20
  def attribute_errors_from(http_response); end

  # @return [Boolean]
  #
  # source://dnsimple//lib/dnsimple/error.rb#35
  def is_json_response?(http_response); end

  # source://dnsimple//lib/dnsimple/error.rb#26
  def message_from(http_response); end
end

# The Response represents a response returned by a client request.
#
# It wraps the content of the response data, as well other response metadata such as rate-limiting information.
#
# source://dnsimple//lib/dnsimple/response.rb#8
class Dnsimple::Response
  # @param http_response [HTTParty::Response] the HTTP response
  # @param data [Object] the response data
  # @return [Response] a new instance of Response
  #
  # source://dnsimple//lib/dnsimple/response.rb#31
  def initialize(http_response, data); end

  # @return [Struct::Base, Array] The content of the response data field.
  #
  # source://dnsimple//lib/dnsimple/response.rb#14
  def data; end

  # @return [HTTParty::Response]
  #
  # source://dnsimple//lib/dnsimple/response.rb#11
  def http_response; end

  # @return [Integer] The maximum number of requests this authentication context can perform per hour.
  # @see https://developer.dnsimple.com/v2/#rate-limiting
  #
  # source://dnsimple//lib/dnsimple/response.rb#18
  def rate_limit; end

  # @return [Integer] The number of requests remaining in the current rate limit window.
  # @see https://developer.dnsimple.com/v2/#rate-limiting
  #
  # source://dnsimple//lib/dnsimple/response.rb#22
  def rate_limit_remaining; end

  # @return [Integer] The time at which the current rate limit window in Unix time format.
  # @see https://developer.dnsimple.com/v2/#rate-limiting
  #
  # source://dnsimple//lib/dnsimple/response.rb#26
  def rate_limit_reset; end
end

# source://dnsimple//lib/dnsimple/struct.rb#4
module Dnsimple::Struct; end

# source://dnsimple//lib/dnsimple/struct/account.rb#7
class Dnsimple::Struct::Account < ::Dnsimple::Struct::Base
  # @return [String] The account email.
  #
  # source://dnsimple//lib/dnsimple/struct/account.rb#11
  def email; end

  # @return [String] The account email.
  #
  # source://dnsimple//lib/dnsimple/struct/account.rb#11
  def email=(_arg0); end

  # @return [Integer] The account ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/account.rb#8
  def id; end

  # @return [Integer] The account ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/account.rb#8
  def id=(_arg0); end

  # @return [String] The identifier of the plan the account is subscribed to.
  #
  # source://dnsimple//lib/dnsimple/struct/account.rb#14
  def plan_identifier; end

  # @return [String] The identifier of the plan the account is subscribed to.
  #
  # source://dnsimple//lib/dnsimple/struct/account.rb#14
  def plan_identifier=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct.rb#6
class Dnsimple::Struct::Base
  # @return [Base] a new instance of Base
  #
  # source://dnsimple//lib/dnsimple/struct.rb#7
  def initialize(attributes = T.unsafe(nil)); end
end

# source://dnsimple//lib/dnsimple/struct/certificate.rb#7
class Dnsimple::Struct::Certificate < ::Dnsimple::Struct::Base
  # @return [Array<String>] The certificate alternate names.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#20
  def alternate_names; end

  # @return [Array<String>] The certificate alternate names.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#20
  def alternate_names=(_arg0); end

  # @return [String] The Certificate Authority (CA) that issued the certificate.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#32
  def authority_identifier; end

  # @return [String] The Certificate Authority (CA) that issued the certificate.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#32
  def authority_identifier=(_arg0); end

  # @return [Boolean] True if the certificate is set to auto-renew on expiration.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#35
  def auto_renew; end

  # @return [Boolean] True if the certificate is set to auto-renew on expiration.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#35
  def auto_renew=(_arg0); end

  # @return [String] The certificate common name.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#17
  def common_name; end

  # @return [String] The certificate common name.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#17
  def common_name=(_arg0); end

  # @return [Integer] The associated contact ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#14
  def contact_id; end

  # @return [Integer] The associated contact ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#14
  def contact_id=(_arg0); end

  # @return [String] When the certificate was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#38
  def created_at; end

  # @return [String] When the certificate was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#38
  def created_at=(_arg0); end

  # @return [String] The certificate CSR.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#26
  def csr; end

  # @return [String] The certificate CSR.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#26
  def csr=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#11
  def domain_id=(_arg0); end

  # @return [String] The timestamp when the certificate will expire.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#44
  def expires_at; end

  # @return [String] The timestamp when the certificate will expire.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#44
  def expires_at=(_arg0); end

  # @return [Integer] The certificate ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#8
  def id; end

  # @return [Integer] The certificate ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#8
  def id=(_arg0); end

  # @return [String] The certificate state.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#29
  def state; end

  # @return [String] The certificate state.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#29
  def state=(_arg0); end

  # @return [String] When the certificate was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#41
  def updated_at; end

  # @return [String] When the certificate was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#41
  def updated_at=(_arg0); end

  # @return [Integer] The years the certificate will last.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#23
  def years; end

  # @return [Integer] The years the certificate will last.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate.rb#23
  def years=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#6
class Dnsimple::Struct::CertificateBundle < ::Dnsimple::Struct::Base
  # @return [Array<String>] Intermediate certificates
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#22
  def chain; end

  # @return [Array<String>] Intermediate certificates
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#22
  def chain=(_arg0); end

  # @return [Array<String>] Intermediate certificates
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#22
  def intermediate_certificates; end

  # @return [String] The certificate private key
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#9
  def private_key; end

  # @return [String] The certificate private key
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#9
  def private_key=(_arg0); end

  # @return [String] The root certificate
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#17
  def root; end

  # @return [String] The root certificate
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#17
  def root=(_arg0); end

  # @return [String] The root certificate
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#17
  def root_certificate; end

  # @return [String] The server certificate
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#12
  def server; end

  # @return [String] The server certificate
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#12
  def server=(_arg0); end

  # @return [String] The server certificate
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_bundle.rb#12
  def server_certificate; end
end

# source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#7
class Dnsimple::Struct::CertificatePurchase < ::Dnsimple::Struct::Base
  # @return [Boolean] True if the certificate is requested to auto-renew
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#17
  def auto_renew; end

  # @return [Boolean] True if the certificate is requested to auto-renew
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#17
  def auto_renew=(_arg0); end

  # @return [Integer] The certificate ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#11
  def certificate_id; end

  # @return [Integer] The certificate ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#11
  def certificate_id=(_arg0); end

  # @return [String] When the certificate renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#20
  def created_at; end

  # @return [String] When the certificate renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#20
  def created_at=(_arg0); end

  # @return [Integer] The certificate purchase ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#8
  def id; end

  # @return [Integer] The certificate purchase ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#8
  def id=(_arg0); end

  # @return [String] The certificate renewal state.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#14
  def state; end

  # @return [String] The certificate renewal state.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#14
  def state=(_arg0); end

  # @return [String] When the certificate renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#23
  def updated_at; end

  # @return [String] When the certificate renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_purchase.rb#23
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#7
class Dnsimple::Struct::CertificateRenewal < ::Dnsimple::Struct::Base
  # @return [Boolean] True if the certificate is requested to auto-renew
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#20
  def auto_renew; end

  # @return [Boolean] True if the certificate is requested to auto-renew
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#20
  def auto_renew=(_arg0); end

  # @return [String] When the certificate renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#23
  def created_at; end

  # @return [String] When the certificate renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#23
  def created_at=(_arg0); end

  # @return [Integer] The certificate renewal ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#8
  def id; end

  # @return [Integer] The certificate renewal ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#8
  def id=(_arg0); end

  # @return [Integer] The new certificate ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#14
  def new_certificate_id; end

  # @return [Integer] The new certificate ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#14
  def new_certificate_id=(_arg0); end

  # @return [Integer] The old certificate ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#11
  def old_certificate_id; end

  # @return [Integer] The old certificate ID.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#11
  def old_certificate_id=(_arg0); end

  # @return [String] The certificate renewal state.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#17
  def state; end

  # @return [String] The certificate renewal state.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#17
  def state=(_arg0); end

  # @return [String] When the certificate renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#26
  def updated_at; end

  # @return [String] When the certificate renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/certificate_renewal.rb#26
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/collaborator.rb#7
class Dnsimple::Struct::Collaborator < ::Dnsimple::Struct::Base
  # @return [String, NilClass] When the collaborator has accepted the invitation.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#32
  def accepted_at; end

  # @return [String, NilClass] When the collaborator has accepted the invitation.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#32
  def accepted_at=(_arg0); end

  # @return [String] When the collaborator was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#26
  def created_at; end

  # @return [String] When the collaborator was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#26
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#11
  def domain_id=(_arg0); end

  # @return [String] The associated domain name.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#14
  def domain_name; end

  # @return [String] The associated domain name.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#14
  def domain_name=(_arg0); end

  # @return [Integer] The collaborator ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#8
  def id; end

  # @return [Integer] The collaborator ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#8
  def id=(_arg0); end

  # @return [TrueClass, FalseClass] Invitation
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#23
  def invitation; end

  # @return [TrueClass, FalseClass] Invitation
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#23
  def invitation=(_arg0); end

  # @return [String] When the collaborator was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#29
  def updated_at; end

  # @return [String] When the collaborator was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#29
  def updated_at=(_arg0); end

  # @return [String] The user email.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#20
  def user_email; end

  # @return [String] The user email.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#20
  def user_email=(_arg0); end

  # @return [Integer, NilClass] The user ID, if the collaborator accepted the invitation.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#17
  def user_id; end

  # @return [Integer, NilClass] The user ID, if the collaborator accepted the invitation.
  #
  # source://dnsimple//lib/dnsimple/struct/collaborator.rb#17
  def user_id=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/contact.rb#7
class Dnsimple::Struct::Contact < ::Dnsimple::Struct::Base
  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#11
  def account_id; end

  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#11
  def account_id=(_arg0); end

  # @return [String] The contact street address.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#29
  def address1; end

  # @return [String] The contact street address.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#29
  def address1=(_arg0); end

  # @return [String] Apartment or suite number.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#32
  def address2; end

  # @return [String] Apartment or suite number.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#32
  def address2=(_arg0); end

  # @return [String] The city name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#35
  def city; end

  # @return [String] The city name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#35
  def city=(_arg0); end

  # @return [String] The contact country (as a 2-character country code).
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#44
  def country; end

  # @return [String] The contact country (as a 2-character country code).
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#44
  def country=(_arg0); end

  # @return [String] When the contact was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#56
  def created_at; end

  # @return [String] When the contact was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#56
  def created_at=(_arg0); end

  # @return [String] The contact email address.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#53
  def email; end

  # @return [String] The contact email address.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#53
  def email=(_arg0); end

  # @return [String] The contact fax number (may be omitted).
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#50
  def fax; end

  # @return [String] The contact fax number (may be omitted).
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#50
  def fax=(_arg0); end

  # @return [String] The contact first name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#17
  def first_name; end

  # @return [String] The contact first name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#17
  def first_name=(_arg0); end

  # @return [Integer] The contact ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#8
  def id; end

  # @return [Integer] The contact ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#8
  def id=(_arg0); end

  # @return [String] The contact's job title.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#23
  def job_title; end

  # @return [String] The contact's job title.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#23
  def job_title=(_arg0); end

  # @return [String] The label to represent the contact.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#14
  def label; end

  # @return [String] The label to represent the contact.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#14
  def label=(_arg0); end

  # @return [String] The contact last name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#20
  def last_name; end

  # @return [String] The contact last name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#20
  def last_name=(_arg0); end

  # @return [String] The name of the organization in which the contact works.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#26
  def organization_name; end

  # @return [String] The name of the organization in which the contact works.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#26
  def organization_name=(_arg0); end

  # @return [String] The contact phone number.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#47
  def phone; end

  # @return [String] The contact phone number.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#47
  def phone=(_arg0); end

  # @return [String] The contact postal code.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#41
  def postal_code; end

  # @return [String] The contact postal code.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#41
  def postal_code=(_arg0); end

  # @return [String] The state or province name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#38
  def state_province; end

  # @return [String] The state or province name.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#38
  def state_province=(_arg0); end

  # @return [String] When the contact was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#59
  def updated_at; end

  # @return [String] When the contact was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/contact.rb#59
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#7
class Dnsimple::Struct::DelegationSignerRecord < ::Dnsimple::Struct::Base
  # @return [String] The signing algorithm used.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#14
  def algorithm; end

  # @return [String] The signing algorithm used.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#14
  def algorithm=(_arg0); end

  # @return [String] When the delegation signing record was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#29
  def created_at; end

  # @return [String] When the delegation signing record was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#29
  def created_at=(_arg0); end

  # @return [String] The digest value.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#17
  def digest; end

  # @return [String] The digest value.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#17
  def digest=(_arg0); end

  # @return [String] The digest type used.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#20
  def digest_type; end

  # @return [String] The digest type used.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#20
  def digest_type=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#11
  def domain_id=(_arg0); end

  # @return [Integer] The ID of the delegation signer record in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#8
  def id; end

  # @return [Integer] The ID of the delegation signer record in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#8
  def id=(_arg0); end

  # @return [String] The keytag for the associated DNSKEY.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#23
  def keytag; end

  # @return [String] The keytag for the associated DNSKEY.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#23
  def keytag=(_arg0); end

  # @return [String] The public key that references the corresponding DNSKEY record.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#26
  def public_key; end

  # @return [String] The public key that references the corresponding DNSKEY record.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#26
  def public_key=(_arg0); end

  # @return [String] When the delegation signing record was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#32
  def updated_at; end

  # @return [String] When the delegation signing record was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/delegation_signer_record.rb#32
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/dnssec.rb#7
class Dnsimple::Struct::Dnssec < ::Dnsimple::Struct::Base
  # @return [Boolean] True if DNSSEC is enabled on the domain, otherwise false
  #
  # source://dnsimple//lib/dnsimple/struct/dnssec.rb#8
  def enabled; end

  # @return [Boolean] True if DNSSEC is enabled on the domain, otherwise false
  #
  # source://dnsimple//lib/dnsimple/struct/dnssec.rb#8
  def enabled=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain.rb#7
class Dnsimple::Struct::Domain < ::Dnsimple::Struct::Base
  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#11
  def account_id; end

  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#11
  def account_id=(_arg0); end

  # @return [Bool] True if the domain is set to auto-renew, false otherwise.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#26
  def auto_renew; end

  # @return [Bool] True if the domain is set to auto-renew, false otherwise.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#26
  def auto_renew=(_arg0); end

  # @return [String] When the domain was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#35
  def created_at; end

  # @return [String] When the domain was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#35
  def created_at=(_arg0); end

  # @return [String] The timestamp when domain will expire.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#32
  def expires_at; end

  # @return [String] The timestamp when domain will expire.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#32
  def expires_at=(_arg0); end

  # @return [Integer] The domain ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#8
  def id; end

  # @return [Integer] The domain ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#8
  def id=(_arg0); end

  # @return [String] The domain name.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#17
  def name; end

  # @return [String] The domain name.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#17
  def name=(_arg0); end

  # @return [Bool] True if the domain WHOIS privacy is enabled, false otherwise.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#29
  def private_whois; end

  # @return [Bool] True if the domain WHOIS privacy is enabled, false otherwise.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#29
  def private_whois=(_arg0); end

  # @return [Integer] The associated registrant (contact) ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#14
  def registrant_id; end

  # @return [Integer] The associated registrant (contact) ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#14
  def registrant_id=(_arg0); end

  # @return [String] The domain state.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#23
  def state; end

  # @return [String] The domain state.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#23
  def state=(_arg0); end

  # @return [String] The domain API token used for domain authentication.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#20
  def token; end

  # @return [String] The domain API token used for domain authentication.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#20
  def token=(_arg0); end

  # @return [String] When the domain was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#38
  def updated_at; end

  # @return [String] When the domain was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain.rb#38
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain_check.rb#7
class Dnsimple::Struct::DomainCheck < ::Dnsimple::Struct::Base
  # @return [Boolean] Whether the domain name is available.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_check.rb#11
  def available; end

  # @return [Boolean] Whether the domain name is available.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_check.rb#11
  def available=(_arg0); end

  # @return [String] The domain name that was checked.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_check.rb#8
  def domain; end

  # @return [String] The domain name that was checked.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_check.rb#8
  def domain=(_arg0); end

  # @return [Boolean] Whether the domain name is premium.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_check.rb#14
  def premium; end

  # @return [Boolean] Whether the domain name is premium.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_check.rb#14
  def premium=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain_premium_price.rb#7
class Dnsimple::Struct::DomainPremiumPrice < ::Dnsimple::Struct::Base
  # @return [String] The action: registration/transfer/renewal
  #
  # source://dnsimple//lib/dnsimple/struct/domain_premium_price.rb#11
  def action; end

  # @return [String] The action: registration/transfer/renewal
  #
  # source://dnsimple//lib/dnsimple/struct/domain_premium_price.rb#11
  def action=(_arg0); end

  # @return [String] The domain premium price
  #
  # source://dnsimple//lib/dnsimple/struct/domain_premium_price.rb#8
  def premium_price; end

  # @return [String] The domain premium price
  #
  # source://dnsimple//lib/dnsimple/struct/domain_premium_price.rb#8
  def premium_price=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain_price.rb#7
class Dnsimple::Struct::DomainPrice < ::Dnsimple::Struct::Base
  # @return [String] The domain name
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#8
  def domain; end

  # @return [String] The domain name
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#8
  def domain=(_arg0); end

  # @return [Boolean] Whether the domain is premium.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#11
  def premium; end

  # @return [Boolean] Whether the domain is premium.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#11
  def premium=(_arg0); end

  # @return [Float] The price for registration
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#14
  def registration_price; end

  # @return [Float] The price for registration
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#14
  def registration_price=(_arg0); end

  # @return [Float] The price for renewal
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#17
  def renewal_price; end

  # @return [Float] The price for renewal
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#17
  def renewal_price=(_arg0); end

  # @return [Float] The price for transfer
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#20
  def transfer_price; end

  # @return [Float] The price for transfer
  #
  # source://dnsimple//lib/dnsimple/struct/domain_price.rb#20
  def transfer_price=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain_push.rb#7
class Dnsimple::Struct::DomainPush < ::Dnsimple::Struct::Base
  # @return [String] When the domain push was accepted in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#26
  def accepted_at; end

  # @return [String] When the domain push was accepted in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#26
  def accepted_at=(_arg0); end

  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#17
  def account_id; end

  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#17
  def account_id=(_arg0); end

  # @return [Integer] The associated contact ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#14
  def contact_id; end

  # @return [Integer] The associated contact ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#14
  def contact_id=(_arg0); end

  # @return [String] When the domain push was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#20
  def created_at; end

  # @return [String] When the domain push was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#20
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#11
  def domain_id=(_arg0); end

  # @return [Integer] The domain push ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#8
  def id; end

  # @return [Integer] The domain push ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#8
  def id=(_arg0); end

  # @return [String] When the domain push was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#23
  def updated_at; end

  # @return [String] When the domain push was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_push.rb#23
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain_registration.rb#7
class Dnsimple::Struct::DomainRegistration < ::Dnsimple::Struct::Base
  # @return [Bool] True if the domain auto-renew was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#23
  def auto_renew; end

  # @return [Bool] True if the domain auto-renew was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#23
  def auto_renew=(_arg0); end

  # @return [String] When the domain renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#29
  def created_at; end

  # @return [String] When the domain renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#29
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#11
  def domain_id=(_arg0); end

  # @return [Integer] The domain registration ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#8
  def id; end

  # @return [Integer] The domain registration ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#8
  def id=(_arg0); end

  # @return [Integer] The number of years the domain was registered for.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#17
  def period; end

  # @return [Integer] The number of years the domain was registered for.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#17
  def period=(_arg0); end

  # @return [Integer] The associated registrant (contact) ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#14
  def registrant_id; end

  # @return [Integer] The associated registrant (contact) ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#14
  def registrant_id=(_arg0); end

  # @return [String] The state of the renewal.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#20
  def state; end

  # @return [String] The state of the renewal.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#20
  def state=(_arg0); end

  # @return [String] When the domain renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#32
  def updated_at; end

  # @return [String] When the domain renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#32
  def updated_at=(_arg0); end

  # @return [Bool] True if the domain WHOIS privacy was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#26
  def whois_privacy; end

  # @return [Bool] True if the domain WHOIS privacy was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_registration.rb#26
  def whois_privacy=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#7
class Dnsimple::Struct::DomainRenewal < ::Dnsimple::Struct::Base
  # @return [String] When the domain renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#20
  def created_at; end

  # @return [String] When the domain renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#20
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#11
  def domain_id=(_arg0); end

  # @return [Integer] The domain renewal ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#8
  def id; end

  # @return [Integer] The domain renewal ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#8
  def id=(_arg0); end

  # @return [Integer] The number of years the domain was renewed for.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#14
  def period; end

  # @return [Integer] The number of years the domain was renewed for.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#14
  def period=(_arg0); end

  # @return [String] The state of the renewal.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#17
  def state; end

  # @return [String] The state of the renewal.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#17
  def state=(_arg0); end

  # @return [String] When the domain renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#23
  def updated_at; end

  # @return [String] When the domain renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_renewal.rb#23
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#7
class Dnsimple::Struct::DomainTransfer < ::Dnsimple::Struct::Base
  # @return [Bool] True if the domain auto-renew was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#20
  def auto_renew; end

  # @return [Bool] True if the domain auto-renew was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#20
  def auto_renew=(_arg0); end

  # @return [String] When the domain renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#29
  def created_at; end

  # @return [String] When the domain renewal was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#29
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#11
  def domain_id=(_arg0); end

  # @return [Integer] The domain registration ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#8
  def id; end

  # @return [Integer] The domain registration ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#8
  def id=(_arg0); end

  # @return [Integer] The associated registrant (contact) ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#14
  def registrant_id; end

  # @return [Integer] The associated registrant (contact) ID.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#14
  def registrant_id=(_arg0); end

  # @return [String] The state of the renewal.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#17
  def state; end

  # @return [String] The state of the renewal.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#17
  def state=(_arg0); end

  # @return [String, nil] The reason if transfer failed.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#26
  def status_description; end

  # @return [String, nil] The reason if transfer failed.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#26
  def status_description=(_arg0); end

  # @return [String] When the domain renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#32
  def updated_at; end

  # @return [String] When the domain renewal was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#32
  def updated_at=(_arg0); end

  # @return [Bool] True if the domain WHOIS privacy was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#23
  def whois_privacy; end

  # @return [Bool] True if the domain WHOIS privacy was requested.
  #
  # source://dnsimple//lib/dnsimple/struct/domain_transfer.rb#23
  def whois_privacy=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/email_forward.rb#7
class Dnsimple::Struct::EmailForward < ::Dnsimple::Struct::Base
  # @return [String] When the email forward was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#20
  def created_at; end

  # @return [String] When the email forward was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#20
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#11
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#11
  def domain_id=(_arg0); end

  # @return [String] The "local part" of the originating email address. Anything to the left of the @ symbol.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#14
  def from; end

  # @return [String] The "local part" of the originating email address. Anything to the left of the @ symbol.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#14
  def from=(_arg0); end

  # @return [Integer] The email forward ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#8
  def id; end

  # @return [Integer] The email forward ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#8
  def id=(_arg0); end

  # @return [String] The full email address to forward to.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#17
  def to; end

  # @return [String] The full email address to forward to.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#17
  def to=(_arg0); end

  # @return [String] Then the email forward was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#23
  def updated_at; end

  # @return [String] Then the email forward was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/email_forward.rb#23
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#6
class Dnsimple::Struct::ExtendedAttribute < ::Dnsimple::Struct::Base
  # @return [ExtendedAttribute] a new instance of ExtendedAttribute
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#31
  def initialize(*_arg0); end

  # A description of the extended attribute
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#23
  def description; end

  # A description of the extended attribute
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#23
  def description=(_arg0); end

  # The extended attribute name
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#20
  def name; end

  # The extended attribute name
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#20
  def name=(_arg0); end

  # @return [Array<Options>] The array of options with possible values for the extended attribute
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#29
  def options; end

  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#36
  def options=(opts); end

  # Boolean indicating if the extended attribute is required
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#26
  def required; end

  # Boolean indicating if the extended attribute is required
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#26
  def required=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#9
class Dnsimple::Struct::ExtendedAttribute::Option < ::Dnsimple::Struct::Base
  # A long description of the option
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#16
  def description; end

  # A long description of the option
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#16
  def description=(_arg0); end

  # The option name
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#10
  def title; end

  # The option name
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#10
  def title=(_arg0); end

  # The option value
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#13
  def value; end

  # The option value
  #
  # source://dnsimple//lib/dnsimple/struct/extended_attribute.rb#13
  def value=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/oauth_token.rb#7
class Dnsimple::Struct::OauthToken < ::Dnsimple::Struct::Base
  # @return [String] The token you can use to authenticate.
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#8
  def access_token; end

  # @return [String] The token you can use to authenticate.
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#8
  def access_token=(_arg0); end

  # @return [Integer] The account ID in DNSimple this token belongs to.
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#17
  def account_id; end

  # @return [Integer] The account ID in DNSimple this token belongs to.
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#17
  def account_id=(_arg0); end

  # @return [String] The token scope (not used for now).
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#14
  def scope; end

  # @return [String] The token scope (not used for now).
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#14
  def scope=(_arg0); end

  # @return [String] The token type.
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#11
  def token_type; end

  # @return [String] The token type.
  #
  # source://dnsimple//lib/dnsimple/struct/oauth_token.rb#11
  def token_type=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/service.rb#6
class Dnsimple::Struct::Service < ::Dnsimple::Struct::Base
  # @return [Service] a new instance of Service
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#52
  def initialize(*_arg0); end

  # @return [String] The default subdomain where the service will be applied.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#47
  def default_subdomain; end

  # @return [String] The default subdomain where the service will be applied.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#47
  def default_subdomain=(_arg0); end

  # @return [String] The service description.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#38
  def description; end

  # @return [String] The service description.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#38
  def description=(_arg0); end

  # @return [Integer] The service ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#29
  def id; end

  # @return [Integer] The service ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#29
  def id=(_arg0); end

  # @return [String] The service name.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#32
  def name; end

  # @return [String] The service name.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#32
  def name=(_arg0); end

  # @return [Boolean] Whether the service requires extra setup.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#44
  def requires_setup; end

  # @return [Boolean] Whether the service requires extra setup.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#44
  def requires_setup=(_arg0); end

  # @return [Array<Settings>] The array of settings to setup this service, if setup is required.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#50
  def settings; end

  # source://dnsimple//lib/dnsimple/struct/service.rb#57
  def settings=(settings); end

  # @return [String] The service setup description.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#41
  def setup_description; end

  # @return [String] The service setup description.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#41
  def setup_description=(_arg0); end

  # @return [String] A string ID for the service.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#35
  def sid; end

  # @return [String] A string ID for the service.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#35
  def sid=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/service.rb#9
class Dnsimple::Struct::Service::Setting < ::Dnsimple::Struct::Base
  # @return [String] A suffix to be appended to the setting value.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#16
  def append; end

  # @return [String] A suffix to be appended to the setting value.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#16
  def append=(_arg0); end

  # @return [String] The setting description.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#19
  def description; end

  # @return [String] The setting description.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#19
  def description=(_arg0); end

  # @return [String] An example of the setting value.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#22
  def example; end

  # @return [String] An example of the setting value.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#22
  def example=(_arg0); end

  # @return [String] The setting label.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#13
  def label; end

  # @return [String] The setting label.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#13
  def label=(_arg0); end

  # @return [String] The setting name.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#10
  def name; end

  # @return [String] The setting name.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#10
  def name=(_arg0); end

  # @return [Boolean] Whether the setting requires a password.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#25
  def password; end

  # @return [Boolean] Whether the setting requires a password.
  #
  # source://dnsimple//lib/dnsimple/struct/service.rb#25
  def password=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/template.rb#7
class Dnsimple::Struct::Template < ::Dnsimple::Struct::Base
  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#11
  def account_id; end

  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#11
  def account_id=(_arg0); end

  # @return [String] The template description.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#20
  def description; end

  # @return [String] The template description.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#20
  def description=(_arg0); end

  # @return [Integer] The template ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#8
  def id; end

  # @return [Integer] The template ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#8
  def id=(_arg0); end

  # @return [String] The template name.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#14
  def name; end

  # @return [String] The template name.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#14
  def name=(_arg0); end

  # @return [String] The string ID for the template.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#17
  def sid; end

  # @return [String] The string ID for the template.
  #
  # source://dnsimple//lib/dnsimple/struct/template.rb#17
  def sid=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/template_record.rb#7
class Dnsimple::Struct::TemplateRecord < ::Dnsimple::Struct::Base
  # @return [String] The plain-text template record content.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#20
  def content; end

  # @return [String] The plain-text template record content.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#20
  def content=(_arg0); end

  # @return [String] When the template record was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#29
  def created_at; end

  # @return [String] When the template record was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#29
  def created_at=(_arg0); end

  # @return [Integer] The template record ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#8
  def id; end

  # @return [Integer] The template record ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#8
  def id=(_arg0); end

  # @return [String] The template record name (without the domain name).
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#17
  def name; end

  # @return [String] The template record name (without the domain name).
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#17
  def name=(_arg0); end

  # @return [Integer] The priority value, if the type of template record accepts a priority.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#26
  def priority; end

  # @return [Integer] The priority value, if the type of template record accepts a priority.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#26
  def priority=(_arg0); end

  # @return [Integer] The template ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#11
  def template_id; end

  # @return [Integer] The template ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#11
  def template_id=(_arg0); end

  # @return [Integer] The template record TTL value.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#23
  def ttl; end

  # @return [Integer] The template record TTL value.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#23
  def ttl=(_arg0); end

  # @return [String] The type of template record, in uppercase.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#14
  def type; end

  # @return [String] The type of template record, in uppercase.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#14
  def type=(_arg0); end

  # @return [String] When the template record was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#32
  def updated_at; end

  # @return [String] When the template record was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/template_record.rb#32
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/tld.rb#7
class Dnsimple::Struct::Tld < ::Dnsimple::Struct::Base
  # @return [Boolean] True if TLD requires use of auto-renewal for renewals.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#17
  def auto_renew_only; end

  # @return [Boolean] True if TLD requires use of auto-renewal for renewals.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#17
  def auto_renew_only=(_arg0); end

  # @return [String, nil] Type of data interface required for DNSSEC for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#35
  def dnssec_interface_type; end

  # @return [String, nil] Type of data interface required for DNSSEC for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#35
  def dnssec_interface_type=(_arg0); end

  # @return [Boolean] True if IDN is available.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#20
  def idn; end

  # @return [Boolean] True if IDN is available.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#20
  def idn=(_arg0); end

  # @return [Integer] The minimum registration period, in years.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#23
  def minimum_registration; end

  # @return [Integer] The minimum registration period, in years.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#23
  def minimum_registration=(_arg0); end

  # @return [Boolean] True if DNSimple supports registrations for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#26
  def registration_enabled; end

  # @return [Boolean] True if DNSimple supports registrations for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#26
  def registration_enabled=(_arg0); end

  # @return [Boolean] True if DNSimple supports renewals for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#29
  def renewal_enabled; end

  # @return [Boolean] True if DNSimple supports renewals for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#29
  def renewal_enabled=(_arg0); end

  # @return [String] The TLD in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#8
  def tld; end

  # @return [String] The TLD in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#8
  def tld=(_arg0); end

  # @return [Integer] The TLD type.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#11
  def tld_type; end

  # @return [Integer] The TLD type.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#11
  def tld_type=(_arg0); end

  # @return [Boolean] True if DNSimple supports inbound transfers for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#32
  def transfer_enabled; end

  # @return [Boolean] True if DNSimple supports inbound transfers for this TLD.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#32
  def transfer_enabled=(_arg0); end

  # @return [Boolean] True if Whois Privacy Protection is available.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#14
  def whois_privacy; end

  # @return [Boolean] True if Whois Privacy Protection is available.
  #
  # source://dnsimple//lib/dnsimple/struct/tld.rb#14
  def whois_privacy=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/user.rb#7
class Dnsimple::Struct::User < ::Dnsimple::Struct::Base
  # @return [String] The user email.
  #
  # source://dnsimple//lib/dnsimple/struct/user.rb#11
  def email; end

  # @return [String] The user email.
  #
  # source://dnsimple//lib/dnsimple/struct/user.rb#11
  def email=(_arg0); end

  # @return [Integer] The user ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/user.rb#8
  def id; end

  # @return [Integer] The user ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/user.rb#8
  def id=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#7
class Dnsimple::Struct::VanityNameServer < ::Dnsimple::Struct::Base
  # @return [String] When the vanity name server was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#20
  def created_at; end

  # @return [String] When the vanity name server was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#20
  def created_at=(_arg0); end

  # @return [Integer] The vanity name server ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#8
  def id; end

  # @return [Integer] The vanity name server ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#8
  def id=(_arg0); end

  # @return [String] The vanity name server IPv4.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#14
  def ipv4; end

  # @return [String] The vanity name server IPv4.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#14
  def ipv4=(_arg0); end

  # @return [String] The vanity name server IPv6.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#17
  def ipv6; end

  # @return [String] The vanity name server IPv6.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#17
  def ipv6=(_arg0); end

  # @return [String] The vanity name server name.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#11
  def name; end

  # @return [String] The vanity name server name.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#11
  def name=(_arg0); end

  # @return [String] When the vanity name server was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#23
  def updated_at; end

  # @return [String] When the vanity name server was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/vanity_name_server.rb#23
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/webhook.rb#7
class Dnsimple::Struct::Webhook < ::Dnsimple::Struct::Base
  # @return [Integer] The contact ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/webhook.rb#8
  def id; end

  # @return [Integer] The contact ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/webhook.rb#8
  def id=(_arg0); end

  # @return [String] The callback URL.
  #
  # source://dnsimple//lib/dnsimple/struct/webhook.rb#11
  def url; end

  # @return [String] The callback URL.
  #
  # source://dnsimple//lib/dnsimple/struct/webhook.rb#11
  def url=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/whoami.rb#7
class Dnsimple::Struct::Whoami < ::Dnsimple::Struct::Base
  # @return [Account] The account, if present.
  #
  # source://dnsimple//lib/dnsimple/struct/whoami.rb#8
  def account; end

  # Converts account to a Struct::Account and sets it.
  #
  # @param account [Hash, nil]
  # @return [void]
  #
  # source://dnsimple//lib/dnsimple/struct/whoami.rb#18
  def account=(account); end

  # @return [String] The user, if present.
  #
  # source://dnsimple//lib/dnsimple/struct/whoami.rb#11
  def user; end

  # Converts user to a Struct::User and sets it.
  #
  # @param user [Hash, nil]
  # @return [void]
  #
  # source://dnsimple//lib/dnsimple/struct/whoami.rb#26
  def user=(user); end
end

# source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#7
class Dnsimple::Struct::WhoisPrivacy < ::Dnsimple::Struct::Base
  # @return [String] When the whois privacy was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#17
  def created_at; end

  # @return [String] When the whois privacy was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#17
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#8
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#8
  def domain_id=(_arg0); end

  # @return [Boolean] Whether the whois privacy is enabled for the domain.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#11
  def enabled; end

  # @return [Boolean] Whether the whois privacy is enabled for the domain.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#11
  def enabled=(_arg0); end

  # @return [String] The date the whois privacy will expire on.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#14
  def expires_on; end

  # @return [String] The date the whois privacy will expire on.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#14
  def expires_on=(_arg0); end

  # @return [String] When the whois privacy was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#20
  def updated_at; end

  # @return [String] When the whois privacy was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy.rb#20
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#7
class Dnsimple::Struct::WhoisPrivacyRenewal < ::Dnsimple::Struct::Base
  # @return [String] When the WHOIS Privacy was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#23
  def created_at; end

  # @return [String] When the WHOIS Privacy was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#23
  def created_at=(_arg0); end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#8
  def domain_id; end

  # @return [Integer] The associated domain ID.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#8
  def domain_id=(_arg0); end

  # @return [Boolean] Whether the WHOIS Privacy is enabled for the domain.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#17
  def enabled; end

  # @return [Boolean] Whether the WHOIS Privacy is enabled for the domain.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#17
  def enabled=(_arg0); end

  # @return [String] The date the WHOIS Privacy will expire on.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#20
  def expires_on; end

  # @return [String] The date the WHOIS Privacy will expire on.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#20
  def expires_on=(_arg0); end

  # @return [String] The WHOIS Privacy order state.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#14
  def state; end

  # @return [String] The WHOIS Privacy order state.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#14
  def state=(_arg0); end

  # @return [String] When the WHOIS Privacy was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#26
  def updated_at; end

  # @return [String] When the WHOIS Privacy was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#26
  def updated_at=(_arg0); end

  # @return [Integer] The associated WHOIS Privacy ID.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#11
  def whois_privacy_id; end

  # @return [Integer] The associated WHOIS Privacy ID.
  #
  # source://dnsimple//lib/dnsimple/struct/whois_privacy_renewal.rb#11
  def whois_privacy_id=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/zone.rb#7
class Dnsimple::Struct::Zone < ::Dnsimple::Struct::Base
  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#11
  def account_id; end

  # @return [Integer] The associated account ID.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#11
  def account_id=(_arg0); end

  # @return [String] When the zone was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#20
  def created_at; end

  # @return [String] When the zone was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#20
  def created_at=(_arg0); end

  # @return [Integer] The zone ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#8
  def id; end

  # @return [Integer] The zone ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#8
  def id=(_arg0); end

  # @return [String] The zone name.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#14
  def name; end

  # @return [String] The zone name.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#14
  def name=(_arg0); end

  # @return [Boolean] True if the zone is a reverse zone.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#17
  def reverse; end

  # @return [Boolean] True if the zone is a reverse zone.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#17
  def reverse=(_arg0); end

  # @return [String] When the zone was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#23
  def updated_at; end

  # @return [String] When the zone was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone.rb#23
  def updated_at=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/zone_distribution.rb#8
class Dnsimple::Struct::ZoneDistribution < ::Dnsimple::Struct::Base
  # @return [Boolean] true if the zone is properly distributed across
  #   all DNSimple name servers.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_distribution.rb#9
  def distributed; end

  # @return [Boolean] true if the zone is properly distributed across
  #   all DNSimple name servers.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_distribution.rb#9
  def distributed=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/zone_file.rb#7
class Dnsimple::Struct::ZoneFile < ::Dnsimple::Struct::Base
  # @return [String] The zone file contents.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_file.rb#8
  def zone; end

  # @return [String] The zone file contents.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_file.rb#8
  def zone=(_arg0); end
end

# source://dnsimple//lib/dnsimple/struct/zone_record.rb#7
class Dnsimple::Struct::ZoneRecord < ::Dnsimple::Struct::Base
  # @return [String] The plain-text record content.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#23
  def content; end

  # @return [String] The plain-text record content.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#23
  def content=(_arg0); end

  # @return [String] When the record was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#38
  def created_at; end

  # @return [String] When the record was created in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#38
  def created_at=(_arg0); end

  # @return [Integer] The record ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#8
  def id; end

  # @return [Integer] The record ID in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#8
  def id=(_arg0); end

  # @return [String] The record name (without the domain name).
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#20
  def name; end

  # @return [String] The record name (without the domain name).
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#20
  def name=(_arg0); end

  # @return [Integer] The ID of the parent record, if this record is dependent on another record.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#14
  def parent_id; end

  # @return [Integer] The ID of the parent record, if this record is dependent on another record.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#14
  def parent_id=(_arg0); end

  # @return [Integer] The priority value, if the type of record accepts a priority.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#29
  def priority; end

  # @return [Integer] The priority value, if the type of record accepts a priority.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#29
  def priority=(_arg0); end

  # @return [Array<String>] The regions where the record is propagated. This is optional.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#35
  def regions; end

  # @return [Array<String>] The regions where the record is propagated. This is optional.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#35
  def regions=(_arg0); end

  # @return [Bool] True if this is a system record created by DNSimple. System records are read-only.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#32
  def system_record; end

  # @return [Bool] True if this is a system record created by DNSimple. System records are read-only.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#32
  def system_record=(_arg0); end

  # @return [Integer] The TTL value.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#26
  def ttl; end

  # @return [Integer] The TTL value.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#26
  def ttl=(_arg0); end

  # @return [String] The type of record, in uppercase.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#17
  def type; end

  # @return [String] The type of record, in uppercase.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#17
  def type=(_arg0); end

  # @return [String] When the record was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#41
  def updated_at; end

  # @return [String] When the record was last updated in DNSimple.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#41
  def updated_at=(_arg0); end

  # @return [String] The associated zone ID.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#11
  def zone_id; end

  # @return [String] The associated zone ID.
  #
  # source://dnsimple//lib/dnsimple/struct/zone_record.rb#11
  def zone_id=(_arg0); end
end

# This module exposes static helpers for the API v2.
#
# Compared to the full, extended API methods provided by the various client services,
# these static methods return directly the underlying data objects.
# Therefore, it's not possible to access response metadata such as throttling or pagination info.
#
# source://dnsimple//lib/dnsimple/client/clients.rb#235
module Dnsimple::V2
  extend ::Dnsimple::Client::Identity::StaticHelpers
end

# source://dnsimple//lib/dnsimple/version.rb#4
Dnsimple::VERSION = T.let(T.unsafe(nil), String)
